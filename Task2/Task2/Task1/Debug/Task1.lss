
Task1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016c8  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004016c8  004016c8  000116c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000444  20000000  004016d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000c0  20000444  00401b14  00020444  2**2
                  ALLOC
  4 .stack        00003004  20000504  00401bd4  00020444  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002046e  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000af56  00000000  00000000  000204c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001831  00000000  00000000  0002b41d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000032c0  00000000  00000000  0002cc4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000005e0  00000000  00000000  0002ff0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000588  00000000  00000000  000304ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000116f8  00000000  00000000  00030a76  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000792a  00000000  00000000  0004216e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004df9a  00000000  00000000  00049a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000019cc  00000000  00000000  00097a34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	08 35 00 20 f1 0c 40 00 b9 0d 40 00 b9 0d 40 00     .5. ..@...@...@.
  400010:	b9 0d 40 00 b9 0d 40 00 b9 0d 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	b9 0d 40 00 b9 0d 40 00 00 00 00 00 b9 0d 40 00     ..@...@.......@.
  40003c:	b9 0d 40 00 b9 0d 40 00 b9 0d 40 00 b9 0d 40 00     ..@...@...@...@.
  40004c:	b9 0d 40 00 b9 0d 40 00 b9 0d 40 00 b9 0d 40 00     ..@...@...@...@.
  40005c:	00 00 00 00 b9 0d 40 00 b9 0d 40 00 00 00 00 00     ......@...@.....
  40006c:	ad 02 40 00 c5 02 40 00 00 00 00 00 b9 0d 40 00     ..@...@.......@.
  40007c:	b9 0d 40 00 00 00 00 00 00 00 00 00 b9 0d 40 00     ..@...........@.
  40008c:	b9 0d 40 00 b9 0d 40 00 b9 0d 40 00 b9 0d 40 00     ..@...@...@...@.
  40009c:	b9 0d 40 00 b9 0d 40 00 b9 0d 40 00 00 00 00 00     ..@...@...@.....
	...
  4000b4:	b9 0d 40 00 b9 0d 40 00 b9 0d 40 00 b9 0d 40 00     ..@...@...@...@.
  4000c4:	b9 0d 40 00 b9 0d 40 00                             ..@...@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000444 	.word	0x20000444
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004016d0 	.word	0x004016d0

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	004016d0 	.word	0x004016d0
  40012c:	20000448 	.word	0x20000448
  400130:	004016d0 	.word	0x004016d0
  400134:	00000000 	.word	0x00000000

00400138 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400138:	b580      	push	{r7, lr}
  40013a:	b084      	sub	sp, #16
  40013c:	af00      	add	r7, sp, #0
  40013e:	6078      	str	r0, [r7, #4]
  400140:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400142:	6878      	ldr	r0, [r7, #4]
  400144:	4b2c      	ldr	r3, [pc, #176]	; (4001f8 <pio_handler_process+0xc0>)
  400146:	4798      	blx	r3
  400148:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40014a:	6878      	ldr	r0, [r7, #4]
  40014c:	4b2b      	ldr	r3, [pc, #172]	; (4001fc <pio_handler_process+0xc4>)
  40014e:	4798      	blx	r3
  400150:	4602      	mov	r2, r0
  400152:	68fb      	ldr	r3, [r7, #12]
  400154:	4013      	ands	r3, r2
  400156:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400158:	68fb      	ldr	r3, [r7, #12]
  40015a:	2b00      	cmp	r3, #0
  40015c:	d03c      	beq.n	4001d8 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40015e:	2300      	movs	r3, #0
  400160:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400162:	e034      	b.n	4001ce <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400164:	4a26      	ldr	r2, [pc, #152]	; (400200 <pio_handler_process+0xc8>)
  400166:	68bb      	ldr	r3, [r7, #8]
  400168:	011b      	lsls	r3, r3, #4
  40016a:	4413      	add	r3, r2
  40016c:	681a      	ldr	r2, [r3, #0]
  40016e:	683b      	ldr	r3, [r7, #0]
  400170:	429a      	cmp	r2, r3
  400172:	d126      	bne.n	4001c2 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400174:	4a22      	ldr	r2, [pc, #136]	; (400200 <pio_handler_process+0xc8>)
  400176:	68bb      	ldr	r3, [r7, #8]
  400178:	011b      	lsls	r3, r3, #4
  40017a:	4413      	add	r3, r2
  40017c:	3304      	adds	r3, #4
  40017e:	681a      	ldr	r2, [r3, #0]
  400180:	68fb      	ldr	r3, [r7, #12]
  400182:	4013      	ands	r3, r2
  400184:	2b00      	cmp	r3, #0
  400186:	d01c      	beq.n	4001c2 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400188:	4a1d      	ldr	r2, [pc, #116]	; (400200 <pio_handler_process+0xc8>)
  40018a:	68bb      	ldr	r3, [r7, #8]
  40018c:	011b      	lsls	r3, r3, #4
  40018e:	4413      	add	r3, r2
  400190:	330c      	adds	r3, #12
  400192:	681b      	ldr	r3, [r3, #0]
  400194:	491a      	ldr	r1, [pc, #104]	; (400200 <pio_handler_process+0xc8>)
  400196:	68ba      	ldr	r2, [r7, #8]
  400198:	0112      	lsls	r2, r2, #4
  40019a:	440a      	add	r2, r1
  40019c:	6810      	ldr	r0, [r2, #0]
  40019e:	4918      	ldr	r1, [pc, #96]	; (400200 <pio_handler_process+0xc8>)
  4001a0:	68ba      	ldr	r2, [r7, #8]
  4001a2:	0112      	lsls	r2, r2, #4
  4001a4:	440a      	add	r2, r1
  4001a6:	3204      	adds	r2, #4
  4001a8:	6812      	ldr	r2, [r2, #0]
  4001aa:	4611      	mov	r1, r2
  4001ac:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4001ae:	4a14      	ldr	r2, [pc, #80]	; (400200 <pio_handler_process+0xc8>)
  4001b0:	68bb      	ldr	r3, [r7, #8]
  4001b2:	011b      	lsls	r3, r3, #4
  4001b4:	4413      	add	r3, r2
  4001b6:	3304      	adds	r3, #4
  4001b8:	681b      	ldr	r3, [r3, #0]
  4001ba:	43db      	mvns	r3, r3
  4001bc:	68fa      	ldr	r2, [r7, #12]
  4001be:	4013      	ands	r3, r2
  4001c0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4001c2:	68bb      	ldr	r3, [r7, #8]
  4001c4:	3301      	adds	r3, #1
  4001c6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4001c8:	68bb      	ldr	r3, [r7, #8]
  4001ca:	2b06      	cmp	r3, #6
  4001cc:	d803      	bhi.n	4001d6 <pio_handler_process+0x9e>
		while (status != 0) {
  4001ce:	68fb      	ldr	r3, [r7, #12]
  4001d0:	2b00      	cmp	r3, #0
  4001d2:	d1c7      	bne.n	400164 <pio_handler_process+0x2c>
  4001d4:	e000      	b.n	4001d8 <pio_handler_process+0xa0>
				break;
  4001d6:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4001d8:	4b0a      	ldr	r3, [pc, #40]	; (400204 <pio_handler_process+0xcc>)
  4001da:	681b      	ldr	r3, [r3, #0]
  4001dc:	2b00      	cmp	r3, #0
  4001de:	d007      	beq.n	4001f0 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  4001e0:	4b09      	ldr	r3, [pc, #36]	; (400208 <pio_handler_process+0xd0>)
  4001e2:	681b      	ldr	r3, [r3, #0]
  4001e4:	2b00      	cmp	r3, #0
  4001e6:	d003      	beq.n	4001f0 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  4001e8:	4b07      	ldr	r3, [pc, #28]	; (400208 <pio_handler_process+0xd0>)
  4001ea:	681b      	ldr	r3, [r3, #0]
  4001ec:	6878      	ldr	r0, [r7, #4]
  4001ee:	4798      	blx	r3
		}
	}
#endif
}
  4001f0:	bf00      	nop
  4001f2:	3710      	adds	r7, #16
  4001f4:	46bd      	mov	sp, r7
  4001f6:	bd80      	pop	{r7, pc}
  4001f8:	004007f3 	.word	0x004007f3
  4001fc:	00400809 	.word	0x00400809
  400200:	20000460 	.word	0x20000460
  400204:	200004dc 	.word	0x200004dc
  400208:	200004d4 	.word	0x200004d4

0040020c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40020c:	b580      	push	{r7, lr}
  40020e:	b086      	sub	sp, #24
  400210:	af00      	add	r7, sp, #0
  400212:	60f8      	str	r0, [r7, #12]
  400214:	60b9      	str	r1, [r7, #8]
  400216:	607a      	str	r2, [r7, #4]
  400218:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40021a:	4b21      	ldr	r3, [pc, #132]	; (4002a0 <pio_handler_set+0x94>)
  40021c:	681b      	ldr	r3, [r3, #0]
  40021e:	2b06      	cmp	r3, #6
  400220:	d901      	bls.n	400226 <pio_handler_set+0x1a>
		return 1;
  400222:	2301      	movs	r3, #1
  400224:	e038      	b.n	400298 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400226:	2300      	movs	r3, #0
  400228:	75fb      	strb	r3, [r7, #23]
  40022a:	e011      	b.n	400250 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  40022c:	7dfb      	ldrb	r3, [r7, #23]
  40022e:	011b      	lsls	r3, r3, #4
  400230:	4a1c      	ldr	r2, [pc, #112]	; (4002a4 <pio_handler_set+0x98>)
  400232:	4413      	add	r3, r2
  400234:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400236:	693b      	ldr	r3, [r7, #16]
  400238:	681a      	ldr	r2, [r3, #0]
  40023a:	68bb      	ldr	r3, [r7, #8]
  40023c:	429a      	cmp	r2, r3
  40023e:	d104      	bne.n	40024a <pio_handler_set+0x3e>
  400240:	693b      	ldr	r3, [r7, #16]
  400242:	685a      	ldr	r2, [r3, #4]
  400244:	687b      	ldr	r3, [r7, #4]
  400246:	429a      	cmp	r2, r3
  400248:	d008      	beq.n	40025c <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40024a:	7dfb      	ldrb	r3, [r7, #23]
  40024c:	3301      	adds	r3, #1
  40024e:	75fb      	strb	r3, [r7, #23]
  400250:	7dfa      	ldrb	r2, [r7, #23]
  400252:	4b13      	ldr	r3, [pc, #76]	; (4002a0 <pio_handler_set+0x94>)
  400254:	681b      	ldr	r3, [r3, #0]
  400256:	429a      	cmp	r2, r3
  400258:	d9e8      	bls.n	40022c <pio_handler_set+0x20>
  40025a:	e000      	b.n	40025e <pio_handler_set+0x52>
			break;
  40025c:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40025e:	693b      	ldr	r3, [r7, #16]
  400260:	68ba      	ldr	r2, [r7, #8]
  400262:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400264:	693b      	ldr	r3, [r7, #16]
  400266:	687a      	ldr	r2, [r7, #4]
  400268:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  40026a:	693b      	ldr	r3, [r7, #16]
  40026c:	683a      	ldr	r2, [r7, #0]
  40026e:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400270:	693b      	ldr	r3, [r7, #16]
  400272:	6a3a      	ldr	r2, [r7, #32]
  400274:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  400276:	7dfa      	ldrb	r2, [r7, #23]
  400278:	4b09      	ldr	r3, [pc, #36]	; (4002a0 <pio_handler_set+0x94>)
  40027a:	681b      	ldr	r3, [r3, #0]
  40027c:	3301      	adds	r3, #1
  40027e:	429a      	cmp	r2, r3
  400280:	d104      	bne.n	40028c <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  400282:	4b07      	ldr	r3, [pc, #28]	; (4002a0 <pio_handler_set+0x94>)
  400284:	681b      	ldr	r3, [r3, #0]
  400286:	3301      	adds	r3, #1
  400288:	4a05      	ldr	r2, [pc, #20]	; (4002a0 <pio_handler_set+0x94>)
  40028a:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40028c:	683a      	ldr	r2, [r7, #0]
  40028e:	6879      	ldr	r1, [r7, #4]
  400290:	68f8      	ldr	r0, [r7, #12]
  400292:	4b05      	ldr	r3, [pc, #20]	; (4002a8 <pio_handler_set+0x9c>)
  400294:	4798      	blx	r3

	return 0;
  400296:	2300      	movs	r3, #0
}
  400298:	4618      	mov	r0, r3
  40029a:	3718      	adds	r7, #24
  40029c:	46bd      	mov	sp, r7
  40029e:	bd80      	pop	{r7, pc}
  4002a0:	200004d0 	.word	0x200004d0
  4002a4:	20000460 	.word	0x20000460
  4002a8:	0040076f 	.word	0x0040076f

004002ac <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4002ac:	b580      	push	{r7, lr}
  4002ae:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4002b0:	210b      	movs	r1, #11
  4002b2:	4802      	ldr	r0, [pc, #8]	; (4002bc <PIOA_Handler+0x10>)
  4002b4:	4b02      	ldr	r3, [pc, #8]	; (4002c0 <PIOA_Handler+0x14>)
  4002b6:	4798      	blx	r3
}
  4002b8:	bf00      	nop
  4002ba:	bd80      	pop	{r7, pc}
  4002bc:	400e0e00 	.word	0x400e0e00
  4002c0:	00400139 	.word	0x00400139

004002c4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4002c4:	b580      	push	{r7, lr}
  4002c6:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4002c8:	210c      	movs	r1, #12
  4002ca:	4802      	ldr	r0, [pc, #8]	; (4002d4 <PIOB_Handler+0x10>)
  4002cc:	4b02      	ldr	r3, [pc, #8]	; (4002d8 <PIOB_Handler+0x14>)
  4002ce:	4798      	blx	r3
}
  4002d0:	bf00      	nop
  4002d2:	bd80      	pop	{r7, pc}
  4002d4:	400e1000 	.word	0x400e1000
  4002d8:	00400139 	.word	0x00400139

004002dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4002dc:	b480      	push	{r7}
  4002de:	b083      	sub	sp, #12
  4002e0:	af00      	add	r7, sp, #0
  4002e2:	4603      	mov	r3, r0
  4002e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4002e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4002ea:	2b00      	cmp	r3, #0
  4002ec:	db0b      	blt.n	400306 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002ee:	4908      	ldr	r1, [pc, #32]	; (400310 <__NVIC_EnableIRQ+0x34>)
  4002f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4002f4:	095b      	lsrs	r3, r3, #5
  4002f6:	79fa      	ldrb	r2, [r7, #7]
  4002f8:	f002 021f 	and.w	r2, r2, #31
  4002fc:	2001      	movs	r0, #1
  4002fe:	fa00 f202 	lsl.w	r2, r0, r2
  400302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  400306:	bf00      	nop
  400308:	370c      	adds	r7, #12
  40030a:	46bd      	mov	sp, r7
  40030c:	bc80      	pop	{r7}
  40030e:	4770      	bx	lr
  400310:	e000e100 	.word	0xe000e100

00400314 <button_handler>:
#include "button.h"

volatile uint32_t button_flag = false;
volatile uint32_t button_status = true; // true = up and false = down

static void button_handler(uint32_t ul_id, uint32_t ul_mask) {
  400314:	b590      	push	{r4, r7, lr}
  400316:	b085      	sub	sp, #20
  400318:	af02      	add	r7, sp, #8
  40031a:	6078      	str	r0, [r7, #4]
  40031c:	6039      	str	r1, [r7, #0]
	
	unused(ul_id);
	unused(ul_mask);
	
	if (button_status) {
  40031e:	4b13      	ldr	r3, [pc, #76]	; (40036c <button_handler+0x58>)
  400320:	681b      	ldr	r3, [r3, #0]
  400322:	2b00      	cmp	r3, #0
  400324:	d00f      	beq.n	400346 <button_handler+0x32>
		button_flag = true;
  400326:	4b12      	ldr	r3, [pc, #72]	; (400370 <button_handler+0x5c>)
  400328:	2201      	movs	r2, #1
  40032a:	601a      	str	r2, [r3, #0]
		pio_handler_set(BUTTON_PIN_1_PIO, BUTTON_PIN_1_ID, BUTTON_PIN_1_MASK, BUTTON_PIN_UP_ATTR, button_handler); // Initialize pio interrupt handler, see pio definition in conf_board.h
  40032c:	4b11      	ldr	r3, [pc, #68]	; (400374 <button_handler+0x60>)
  40032e:	9300      	str	r3, [sp, #0]
  400330:	2359      	movs	r3, #89	; 0x59
  400332:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400336:	210b      	movs	r1, #11
  400338:	480f      	ldr	r0, [pc, #60]	; (400378 <button_handler+0x64>)
  40033a:	4c10      	ldr	r4, [pc, #64]	; (40037c <button_handler+0x68>)
  40033c:	47a0      	blx	r4
		button_status = false;
  40033e:	4b0b      	ldr	r3, [pc, #44]	; (40036c <button_handler+0x58>)
  400340:	2200      	movs	r2, #0
  400342:	601a      	str	r2, [r3, #0]
	} else {
		button_flag = true;
		pio_handler_set(BUTTON_PIN_1_PIO, BUTTON_PIN_1_ID, BUTTON_PIN_1_MASK, BUTTON_PIN_DOWN_ATTR, button_handler); // Initialize pio interrupt handler, see pio definition in conf_board.h
		button_status = true;
	}
}
  400344:	e00e      	b.n	400364 <button_handler+0x50>
		button_flag = true;
  400346:	4b0a      	ldr	r3, [pc, #40]	; (400370 <button_handler+0x5c>)
  400348:	2201      	movs	r2, #1
  40034a:	601a      	str	r2, [r3, #0]
		pio_handler_set(BUTTON_PIN_1_PIO, BUTTON_PIN_1_ID, BUTTON_PIN_1_MASK, BUTTON_PIN_DOWN_ATTR, button_handler); // Initialize pio interrupt handler, see pio definition in conf_board.h
  40034c:	4b09      	ldr	r3, [pc, #36]	; (400374 <button_handler+0x60>)
  40034e:	9300      	str	r3, [sp, #0]
  400350:	2379      	movs	r3, #121	; 0x79
  400352:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400356:	210b      	movs	r1, #11
  400358:	4807      	ldr	r0, [pc, #28]	; (400378 <button_handler+0x64>)
  40035a:	4c08      	ldr	r4, [pc, #32]	; (40037c <button_handler+0x68>)
  40035c:	47a0      	blx	r4
		button_status = true;
  40035e:	4b03      	ldr	r3, [pc, #12]	; (40036c <button_handler+0x58>)
  400360:	2201      	movs	r2, #1
  400362:	601a      	str	r2, [r3, #0]
}
  400364:	bf00      	nop
  400366:	370c      	adds	r7, #12
  400368:	46bd      	mov	sp, r7
  40036a:	bd90      	pop	{r4, r7, pc}
  40036c:	2000000c 	.word	0x2000000c
  400370:	200004d8 	.word	0x200004d8
  400374:	00400315 	.word	0x00400315
  400378:	400e0e00 	.word	0x400e0e00
  40037c:	0040020d 	.word	0x0040020d

00400380 <configure_button>:

void configure_button(void) {
  400380:	b590      	push	{r4, r7, lr}
  400382:	b083      	sub	sp, #12
  400384:	af02      	add	r7, sp, #8
	
	pmc_enable_periph_clk(BUTTON_PIN_1_ID); // configure pio clock
  400386:	200b      	movs	r0, #11
  400388:	4b0e      	ldr	r3, [pc, #56]	; (4003c4 <configure_button+0x44>)
  40038a:	4798      	blx	r3
	pio_set_debounce_filter(BUTTON_PIN_1_PIO, BUTTON_PIN_1_MASK, 10); // adust pio debounce filter using a 10 Hz filter
  40038c:	220a      	movs	r2, #10
  40038e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  400392:	480d      	ldr	r0, [pc, #52]	; (4003c8 <configure_button+0x48>)
  400394:	4b0d      	ldr	r3, [pc, #52]	; (4003cc <configure_button+0x4c>)
  400396:	4798      	blx	r3
	pio_handler_set(BUTTON_PIN_1_PIO, BUTTON_PIN_1_ID, BUTTON_PIN_1_MASK, BUTTON_PIN_DOWN_ATTR, button_handler); // Initialize pio interrupt handler, see pio definition in conf_board.h
  400398:	4b0d      	ldr	r3, [pc, #52]	; (4003d0 <configure_button+0x50>)
  40039a:	9300      	str	r3, [sp, #0]
  40039c:	2379      	movs	r3, #121	; 0x79
  40039e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4003a2:	210b      	movs	r1, #11
  4003a4:	4808      	ldr	r0, [pc, #32]	; (4003c8 <configure_button+0x48>)
  4003a6:	4c0b      	ldr	r4, [pc, #44]	; (4003d4 <configure_button+0x54>)
  4003a8:	47a0      	blx	r4
	NVIC_EnableIRQ((IRQn_Type)BUTTON_PIN_1_ID); //Enable pio controller irqs
  4003aa:	200b      	movs	r0, #11
  4003ac:	4b0a      	ldr	r3, [pc, #40]	; (4003d8 <configure_button+0x58>)
  4003ae:	4798      	blx	r3
	pio_enable_interrupt(BUTTON_PIN_1_PIO, BUTTON_PIN_1_MASK); //Enable pio interrupt lines
  4003b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  4003b4:	4804      	ldr	r0, [pc, #16]	; (4003c8 <configure_button+0x48>)
  4003b6:	4b09      	ldr	r3, [pc, #36]	; (4003dc <configure_button+0x5c>)
  4003b8:	4798      	blx	r3

  4003ba:	bf00      	nop
  4003bc:	3704      	adds	r7, #4
  4003be:	46bd      	mov	sp, r7
  4003c0:	bd90      	pop	{r4, r7, pc}
  4003c2:	bf00      	nop
  4003c4:	00400a6d 	.word	0x00400a6d
  4003c8:	400e0e00 	.word	0x400e0e00
  4003cc:	00400739 	.word	0x00400739
  4003d0:	00400315 	.word	0x00400315
  4003d4:	0040020d 	.word	0x0040020d
  4003d8:	004002dd 	.word	0x004002dd
  4003dc:	004007d9 	.word	0x004007d9

004003e0 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  4003e0:	b580      	push	{r7, lr}
  4003e2:	b082      	sub	sp, #8
  4003e4:	af00      	add	r7, sp, #0
  4003e6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4003e8:	687b      	ldr	r3, [r7, #4]
  4003ea:	2b07      	cmp	r3, #7
  4003ec:	d831      	bhi.n	400452 <osc_enable+0x72>
  4003ee:	a201      	add	r2, pc, #4	; (adr r2, 4003f4 <osc_enable+0x14>)
  4003f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4003f4:	00400451 	.word	0x00400451
  4003f8:	00400415 	.word	0x00400415
  4003fc:	0040041d 	.word	0x0040041d
  400400:	00400425 	.word	0x00400425
  400404:	0040042d 	.word	0x0040042d
  400408:	00400435 	.word	0x00400435
  40040c:	0040043d 	.word	0x0040043d
  400410:	00400447 	.word	0x00400447
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400414:	2000      	movs	r0, #0
  400416:	4b11      	ldr	r3, [pc, #68]	; (40045c <osc_enable+0x7c>)
  400418:	4798      	blx	r3
		break;
  40041a:	e01a      	b.n	400452 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  40041c:	2001      	movs	r0, #1
  40041e:	4b0f      	ldr	r3, [pc, #60]	; (40045c <osc_enable+0x7c>)
  400420:	4798      	blx	r3
		break;
  400422:	e016      	b.n	400452 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  400424:	2000      	movs	r0, #0
  400426:	4b0e      	ldr	r3, [pc, #56]	; (400460 <osc_enable+0x80>)
  400428:	4798      	blx	r3
		break;
  40042a:	e012      	b.n	400452 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  40042c:	2010      	movs	r0, #16
  40042e:	4b0c      	ldr	r3, [pc, #48]	; (400460 <osc_enable+0x80>)
  400430:	4798      	blx	r3
		break;
  400432:	e00e      	b.n	400452 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400434:	2020      	movs	r0, #32
  400436:	4b0a      	ldr	r3, [pc, #40]	; (400460 <osc_enable+0x80>)
  400438:	4798      	blx	r3
		break;
  40043a:	e00a      	b.n	400452 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40043c:	213e      	movs	r1, #62	; 0x3e
  40043e:	2000      	movs	r0, #0
  400440:	4b08      	ldr	r3, [pc, #32]	; (400464 <osc_enable+0x84>)
  400442:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400444:	e005      	b.n	400452 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400446:	213e      	movs	r1, #62	; 0x3e
  400448:	2001      	movs	r0, #1
  40044a:	4b06      	ldr	r3, [pc, #24]	; (400464 <osc_enable+0x84>)
  40044c:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40044e:	e000      	b.n	400452 <osc_enable+0x72>
		break;
  400450:	bf00      	nop
	}
}
  400452:	bf00      	nop
  400454:	3708      	adds	r7, #8
  400456:	46bd      	mov	sp, r7
  400458:	bd80      	pop	{r7, pc}
  40045a:	bf00      	nop
  40045c:	004008a1 	.word	0x004008a1
  400460:	0040090d 	.word	0x0040090d
  400464:	0040097d 	.word	0x0040097d

00400468 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400468:	b580      	push	{r7, lr}
  40046a:	b082      	sub	sp, #8
  40046c:	af00      	add	r7, sp, #0
  40046e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400470:	687b      	ldr	r3, [r7, #4]
  400472:	2b07      	cmp	r3, #7
  400474:	d826      	bhi.n	4004c4 <osc_is_ready+0x5c>
  400476:	a201      	add	r2, pc, #4	; (adr r2, 40047c <osc_is_ready+0x14>)
  400478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40047c:	0040049d 	.word	0x0040049d
  400480:	004004a1 	.word	0x004004a1
  400484:	004004a1 	.word	0x004004a1
  400488:	004004b3 	.word	0x004004b3
  40048c:	004004b3 	.word	0x004004b3
  400490:	004004b3 	.word	0x004004b3
  400494:	004004b3 	.word	0x004004b3
  400498:	004004b3 	.word	0x004004b3
	case OSC_SLCK_32K_RC:
		return 1;
  40049c:	2301      	movs	r3, #1
  40049e:	e012      	b.n	4004c6 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  4004a0:	4b0b      	ldr	r3, [pc, #44]	; (4004d0 <osc_is_ready+0x68>)
  4004a2:	4798      	blx	r3
  4004a4:	4603      	mov	r3, r0
  4004a6:	2b00      	cmp	r3, #0
  4004a8:	bf14      	ite	ne
  4004aa:	2301      	movne	r3, #1
  4004ac:	2300      	moveq	r3, #0
  4004ae:	b2db      	uxtb	r3, r3
  4004b0:	e009      	b.n	4004c6 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4004b2:	4b08      	ldr	r3, [pc, #32]	; (4004d4 <osc_is_ready+0x6c>)
  4004b4:	4798      	blx	r3
  4004b6:	4603      	mov	r3, r0
  4004b8:	2b00      	cmp	r3, #0
  4004ba:	bf14      	ite	ne
  4004bc:	2301      	movne	r3, #1
  4004be:	2300      	moveq	r3, #0
  4004c0:	b2db      	uxtb	r3, r3
  4004c2:	e000      	b.n	4004c6 <osc_is_ready+0x5e>
	}

	return 0;
  4004c4:	2300      	movs	r3, #0
}
  4004c6:	4618      	mov	r0, r3
  4004c8:	3708      	adds	r7, #8
  4004ca:	46bd      	mov	sp, r7
  4004cc:	bd80      	pop	{r7, pc}
  4004ce:	bf00      	nop
  4004d0:	004008d9 	.word	0x004008d9
  4004d4:	004009f5 	.word	0x004009f5

004004d8 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4004d8:	b480      	push	{r7}
  4004da:	b083      	sub	sp, #12
  4004dc:	af00      	add	r7, sp, #0
  4004de:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4004e0:	687b      	ldr	r3, [r7, #4]
  4004e2:	2b07      	cmp	r3, #7
  4004e4:	d825      	bhi.n	400532 <osc_get_rate+0x5a>
  4004e6:	a201      	add	r2, pc, #4	; (adr r2, 4004ec <osc_get_rate+0x14>)
  4004e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4004ec:	0040050d 	.word	0x0040050d
  4004f0:	00400513 	.word	0x00400513
  4004f4:	00400519 	.word	0x00400519
  4004f8:	0040051f 	.word	0x0040051f
  4004fc:	00400523 	.word	0x00400523
  400500:	00400527 	.word	0x00400527
  400504:	0040052b 	.word	0x0040052b
  400508:	0040052f 	.word	0x0040052f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40050c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400510:	e010      	b.n	400534 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400516:	e00d      	b.n	400534 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40051c:	e00a      	b.n	400534 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40051e:	4b08      	ldr	r3, [pc, #32]	; (400540 <osc_get_rate+0x68>)
  400520:	e008      	b.n	400534 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400522:	4b08      	ldr	r3, [pc, #32]	; (400544 <osc_get_rate+0x6c>)
  400524:	e006      	b.n	400534 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400526:	4b08      	ldr	r3, [pc, #32]	; (400548 <osc_get_rate+0x70>)
  400528:	e004      	b.n	400534 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40052a:	4b07      	ldr	r3, [pc, #28]	; (400548 <osc_get_rate+0x70>)
  40052c:	e002      	b.n	400534 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40052e:	4b06      	ldr	r3, [pc, #24]	; (400548 <osc_get_rate+0x70>)
  400530:	e000      	b.n	400534 <osc_get_rate+0x5c>
	}

	return 0;
  400532:	2300      	movs	r3, #0
}
  400534:	4618      	mov	r0, r3
  400536:	370c      	adds	r7, #12
  400538:	46bd      	mov	sp, r7
  40053a:	bc80      	pop	{r7}
  40053c:	4770      	bx	lr
  40053e:	bf00      	nop
  400540:	003d0900 	.word	0x003d0900
  400544:	007a1200 	.word	0x007a1200
  400548:	00b71b00 	.word	0x00b71b00

0040054c <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  40054c:	b580      	push	{r7, lr}
  40054e:	b082      	sub	sp, #8
  400550:	af00      	add	r7, sp, #0
  400552:	4603      	mov	r3, r0
  400554:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400556:	bf00      	nop
  400558:	79fb      	ldrb	r3, [r7, #7]
  40055a:	4618      	mov	r0, r3
  40055c:	4b05      	ldr	r3, [pc, #20]	; (400574 <osc_wait_ready+0x28>)
  40055e:	4798      	blx	r3
  400560:	4603      	mov	r3, r0
  400562:	f083 0301 	eor.w	r3, r3, #1
  400566:	b2db      	uxtb	r3, r3
  400568:	2b00      	cmp	r3, #0
  40056a:	d1f5      	bne.n	400558 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  40056c:	bf00      	nop
  40056e:	3708      	adds	r7, #8
  400570:	46bd      	mov	sp, r7
  400572:	bd80      	pop	{r7, pc}
  400574:	00400469 	.word	0x00400469

00400578 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400578:	b580      	push	{r7, lr}
  40057a:	b086      	sub	sp, #24
  40057c:	af00      	add	r7, sp, #0
  40057e:	60f8      	str	r0, [r7, #12]
  400580:	607a      	str	r2, [r7, #4]
  400582:	603b      	str	r3, [r7, #0]
  400584:	460b      	mov	r3, r1
  400586:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400588:	7afb      	ldrb	r3, [r7, #11]
  40058a:	4618      	mov	r0, r3
  40058c:	4b0d      	ldr	r3, [pc, #52]	; (4005c4 <pll_config_init+0x4c>)
  40058e:	4798      	blx	r3
  400590:	4602      	mov	r2, r0
  400592:	687b      	ldr	r3, [r7, #4]
  400594:	fbb2 f3f3 	udiv	r3, r2, r3
  400598:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40059a:	697b      	ldr	r3, [r7, #20]
  40059c:	683a      	ldr	r2, [r7, #0]
  40059e:	fb02 f303 	mul.w	r3, r2, r3
  4005a2:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4005a4:	683b      	ldr	r3, [r7, #0]
  4005a6:	3b01      	subs	r3, #1
  4005a8:	041a      	lsls	r2, r3, #16
  4005aa:	4b07      	ldr	r3, [pc, #28]	; (4005c8 <pll_config_init+0x50>)
  4005ac:	4013      	ands	r3, r2
  4005ae:	687a      	ldr	r2, [r7, #4]
  4005b0:	b2d2      	uxtb	r2, r2
  4005b2:	4313      	orrs	r3, r2
  4005b4:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  4005b8:	68fb      	ldr	r3, [r7, #12]
  4005ba:	601a      	str	r2, [r3, #0]
}
  4005bc:	bf00      	nop
  4005be:	3718      	adds	r7, #24
  4005c0:	46bd      	mov	sp, r7
  4005c2:	bd80      	pop	{r7, pc}
  4005c4:	004004d9 	.word	0x004004d9
  4005c8:	07ff0000 	.word	0x07ff0000

004005cc <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4005cc:	b580      	push	{r7, lr}
  4005ce:	b082      	sub	sp, #8
  4005d0:	af00      	add	r7, sp, #0
  4005d2:	6078      	str	r0, [r7, #4]
  4005d4:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4005d6:	683b      	ldr	r3, [r7, #0]
  4005d8:	2b00      	cmp	r3, #0
  4005da:	d108      	bne.n	4005ee <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4005dc:	4b09      	ldr	r3, [pc, #36]	; (400604 <pll_enable+0x38>)
  4005de:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4005e0:	4a09      	ldr	r2, [pc, #36]	; (400608 <pll_enable+0x3c>)
  4005e2:	687b      	ldr	r3, [r7, #4]
  4005e4:	681b      	ldr	r3, [r3, #0]
  4005e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4005ea:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  4005ec:	e005      	b.n	4005fa <pll_enable+0x2e>
		pmc_disable_pllbck();
  4005ee:	4b07      	ldr	r3, [pc, #28]	; (40060c <pll_enable+0x40>)
  4005f0:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  4005f2:	4a05      	ldr	r2, [pc, #20]	; (400608 <pll_enable+0x3c>)
  4005f4:	687b      	ldr	r3, [r7, #4]
  4005f6:	681b      	ldr	r3, [r3, #0]
  4005f8:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  4005fa:	bf00      	nop
  4005fc:	3708      	adds	r7, #8
  4005fe:	46bd      	mov	sp, r7
  400600:	bd80      	pop	{r7, pc}
  400602:	bf00      	nop
  400604:	00400a0d 	.word	0x00400a0d
  400608:	400e0400 	.word	0x400e0400
  40060c:	00400a3d 	.word	0x00400a3d

00400610 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400610:	b580      	push	{r7, lr}
  400612:	b082      	sub	sp, #8
  400614:	af00      	add	r7, sp, #0
  400616:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400618:	687b      	ldr	r3, [r7, #4]
  40061a:	2b00      	cmp	r3, #0
  40061c:	d103      	bne.n	400626 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  40061e:	4b05      	ldr	r3, [pc, #20]	; (400634 <pll_is_locked+0x24>)
  400620:	4798      	blx	r3
  400622:	4603      	mov	r3, r0
  400624:	e002      	b.n	40062c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  400626:	4b04      	ldr	r3, [pc, #16]	; (400638 <pll_is_locked+0x28>)
  400628:	4798      	blx	r3
  40062a:	4603      	mov	r3, r0
	}
}
  40062c:	4618      	mov	r0, r3
  40062e:	3708      	adds	r7, #8
  400630:	46bd      	mov	sp, r7
  400632:	bd80      	pop	{r7, pc}
  400634:	00400a25 	.word	0x00400a25
  400638:	00400a55 	.word	0x00400a55

0040063c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40063c:	b580      	push	{r7, lr}
  40063e:	b082      	sub	sp, #8
  400640:	af00      	add	r7, sp, #0
  400642:	4603      	mov	r3, r0
  400644:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400646:	79fb      	ldrb	r3, [r7, #7]
  400648:	3b03      	subs	r3, #3
  40064a:	2b04      	cmp	r3, #4
  40064c:	d808      	bhi.n	400660 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40064e:	79fb      	ldrb	r3, [r7, #7]
  400650:	4618      	mov	r0, r3
  400652:	4b06      	ldr	r3, [pc, #24]	; (40066c <pll_enable_source+0x30>)
  400654:	4798      	blx	r3
		osc_wait_ready(e_src);
  400656:	79fb      	ldrb	r3, [r7, #7]
  400658:	4618      	mov	r0, r3
  40065a:	4b05      	ldr	r3, [pc, #20]	; (400670 <pll_enable_source+0x34>)
  40065c:	4798      	blx	r3
		break;
  40065e:	e000      	b.n	400662 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400660:	bf00      	nop
	}
}
  400662:	bf00      	nop
  400664:	3708      	adds	r7, #8
  400666:	46bd      	mov	sp, r7
  400668:	bd80      	pop	{r7, pc}
  40066a:	bf00      	nop
  40066c:	004003e1 	.word	0x004003e1
  400670:	0040054d 	.word	0x0040054d

00400674 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400674:	b580      	push	{r7, lr}
  400676:	b082      	sub	sp, #8
  400678:	af00      	add	r7, sp, #0
  40067a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40067c:	bf00      	nop
  40067e:	6878      	ldr	r0, [r7, #4]
  400680:	4b04      	ldr	r3, [pc, #16]	; (400694 <pll_wait_for_lock+0x20>)
  400682:	4798      	blx	r3
  400684:	4603      	mov	r3, r0
  400686:	2b00      	cmp	r3, #0
  400688:	d0f9      	beq.n	40067e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40068a:	2300      	movs	r3, #0
}
  40068c:	4618      	mov	r0, r3
  40068e:	3708      	adds	r7, #8
  400690:	46bd      	mov	sp, r7
  400692:	bd80      	pop	{r7, pc}
  400694:	00400611 	.word	0x00400611

00400698 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400698:	b580      	push	{r7, lr}
  40069a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40069c:	2006      	movs	r0, #6
  40069e:	4b04      	ldr	r3, [pc, #16]	; (4006b0 <sysclk_get_main_hz+0x18>)
  4006a0:	4798      	blx	r3
  4006a2:	4602      	mov	r2, r0
  4006a4:	4613      	mov	r3, r2
  4006a6:	009b      	lsls	r3, r3, #2
  4006a8:	4413      	add	r3, r2
  4006aa:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4006ac:	4618      	mov	r0, r3
  4006ae:	bd80      	pop	{r7, pc}
  4006b0:	004004d9 	.word	0x004004d9

004006b4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4006b4:	b580      	push	{r7, lr}
  4006b6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4006b8:	4b02      	ldr	r3, [pc, #8]	; (4006c4 <sysclk_get_cpu_hz+0x10>)
  4006ba:	4798      	blx	r3
  4006bc:	4603      	mov	r3, r0
  4006be:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4006c0:	4618      	mov	r0, r3
  4006c2:	bd80      	pop	{r7, pc}
  4006c4:	00400699 	.word	0x00400699

004006c8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4006c8:	b590      	push	{r4, r7, lr}
  4006ca:	b083      	sub	sp, #12
  4006cc:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4006ce:	4811      	ldr	r0, [pc, #68]	; (400714 <sysclk_init+0x4c>)
  4006d0:	4b11      	ldr	r3, [pc, #68]	; (400718 <sysclk_init+0x50>)
  4006d2:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  4006d4:	2006      	movs	r0, #6
  4006d6:	4b11      	ldr	r3, [pc, #68]	; (40071c <sysclk_init+0x54>)
  4006d8:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4006da:	1d38      	adds	r0, r7, #4
  4006dc:	2314      	movs	r3, #20
  4006de:	2201      	movs	r2, #1
  4006e0:	2106      	movs	r1, #6
  4006e2:	4c0f      	ldr	r4, [pc, #60]	; (400720 <sysclk_init+0x58>)
  4006e4:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4006e6:	1d3b      	adds	r3, r7, #4
  4006e8:	2100      	movs	r1, #0
  4006ea:	4618      	mov	r0, r3
  4006ec:	4b0d      	ldr	r3, [pc, #52]	; (400724 <sysclk_init+0x5c>)
  4006ee:	4798      	blx	r3
		pll_wait_for_lock(0);
  4006f0:	2000      	movs	r0, #0
  4006f2:	4b0d      	ldr	r3, [pc, #52]	; (400728 <sysclk_init+0x60>)
  4006f4:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4006f6:	2010      	movs	r0, #16
  4006f8:	4b0c      	ldr	r3, [pc, #48]	; (40072c <sysclk_init+0x64>)
  4006fa:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4006fc:	4b0c      	ldr	r3, [pc, #48]	; (400730 <sysclk_init+0x68>)
  4006fe:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400700:	4b0c      	ldr	r3, [pc, #48]	; (400734 <sysclk_init+0x6c>)
  400702:	4798      	blx	r3
  400704:	4603      	mov	r3, r0
  400706:	4618      	mov	r0, r3
  400708:	4b03      	ldr	r3, [pc, #12]	; (400718 <sysclk_init+0x50>)
  40070a:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40070c:	bf00      	nop
  40070e:	370c      	adds	r7, #12
  400710:	46bd      	mov	sp, r7
  400712:	bd90      	pop	{r4, r7, pc}
  400714:	07270e00 	.word	0x07270e00
  400718:	00400f59 	.word	0x00400f59
  40071c:	0040063d 	.word	0x0040063d
  400720:	00400579 	.word	0x00400579
  400724:	004005cd 	.word	0x004005cd
  400728:	00400675 	.word	0x00400675
  40072c:	00400821 	.word	0x00400821
  400730:	00400dc1 	.word	0x00400dc1
  400734:	004006b5 	.word	0x004006b5

00400738 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  400738:	b480      	push	{r7}
  40073a:	b085      	sub	sp, #20
  40073c:	af00      	add	r7, sp, #0
  40073e:	60f8      	str	r0, [r7, #12]
  400740:	60b9      	str	r1, [r7, #8]
  400742:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400744:	68fb      	ldr	r3, [r7, #12]
  400746:	68ba      	ldr	r2, [r7, #8]
  400748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  40074c:	687b      	ldr	r3, [r7, #4]
  40074e:	005b      	lsls	r3, r3, #1
  400750:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400754:	fbb2 f3f3 	udiv	r3, r2, r3
  400758:	3b01      	subs	r3, #1
  40075a:	f3c3 020d 	ubfx	r2, r3, #0, #14
  40075e:	68fb      	ldr	r3, [r7, #12]
  400760:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  400764:	bf00      	nop
  400766:	3714      	adds	r7, #20
  400768:	46bd      	mov	sp, r7
  40076a:	bc80      	pop	{r7}
  40076c:	4770      	bx	lr

0040076e <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  40076e:	b480      	push	{r7}
  400770:	b085      	sub	sp, #20
  400772:	af00      	add	r7, sp, #0
  400774:	60f8      	str	r0, [r7, #12]
  400776:	60b9      	str	r1, [r7, #8]
  400778:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  40077a:	687b      	ldr	r3, [r7, #4]
  40077c:	f003 0310 	and.w	r3, r3, #16
  400780:	2b00      	cmp	r3, #0
  400782:	d020      	beq.n	4007c6 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400784:	68fb      	ldr	r3, [r7, #12]
  400786:	68ba      	ldr	r2, [r7, #8]
  400788:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40078c:	687b      	ldr	r3, [r7, #4]
  40078e:	f003 0320 	and.w	r3, r3, #32
  400792:	2b00      	cmp	r3, #0
  400794:	d004      	beq.n	4007a0 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400796:	68fb      	ldr	r3, [r7, #12]
  400798:	68ba      	ldr	r2, [r7, #8]
  40079a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40079e:	e003      	b.n	4007a8 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  4007a0:	68fb      	ldr	r3, [r7, #12]
  4007a2:	68ba      	ldr	r2, [r7, #8]
  4007a4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  4007a8:	687b      	ldr	r3, [r7, #4]
  4007aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4007ae:	2b00      	cmp	r3, #0
  4007b0:	d004      	beq.n	4007bc <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  4007b2:	68fb      	ldr	r3, [r7, #12]
  4007b4:	68ba      	ldr	r2, [r7, #8]
  4007b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  4007ba:	e008      	b.n	4007ce <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  4007bc:	68fb      	ldr	r3, [r7, #12]
  4007be:	68ba      	ldr	r2, [r7, #8]
  4007c0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  4007c4:	e003      	b.n	4007ce <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  4007c6:	68fb      	ldr	r3, [r7, #12]
  4007c8:	68ba      	ldr	r2, [r7, #8]
  4007ca:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  4007ce:	bf00      	nop
  4007d0:	3714      	adds	r7, #20
  4007d2:	46bd      	mov	sp, r7
  4007d4:	bc80      	pop	{r7}
  4007d6:	4770      	bx	lr

004007d8 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4007d8:	b480      	push	{r7}
  4007da:	b083      	sub	sp, #12
  4007dc:	af00      	add	r7, sp, #0
  4007de:	6078      	str	r0, [r7, #4]
  4007e0:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  4007e2:	687b      	ldr	r3, [r7, #4]
  4007e4:	683a      	ldr	r2, [r7, #0]
  4007e6:	641a      	str	r2, [r3, #64]	; 0x40
}
  4007e8:	bf00      	nop
  4007ea:	370c      	adds	r7, #12
  4007ec:	46bd      	mov	sp, r7
  4007ee:	bc80      	pop	{r7}
  4007f0:	4770      	bx	lr

004007f2 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4007f2:	b480      	push	{r7}
  4007f4:	b083      	sub	sp, #12
  4007f6:	af00      	add	r7, sp, #0
  4007f8:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4007fa:	687b      	ldr	r3, [r7, #4]
  4007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4007fe:	4618      	mov	r0, r3
  400800:	370c      	adds	r7, #12
  400802:	46bd      	mov	sp, r7
  400804:	bc80      	pop	{r7}
  400806:	4770      	bx	lr

00400808 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400808:	b480      	push	{r7}
  40080a:	b083      	sub	sp, #12
  40080c:	af00      	add	r7, sp, #0
  40080e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400810:	687b      	ldr	r3, [r7, #4]
  400812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400814:	4618      	mov	r0, r3
  400816:	370c      	adds	r7, #12
  400818:	46bd      	mov	sp, r7
  40081a:	bc80      	pop	{r7}
  40081c:	4770      	bx	lr
	...

00400820 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400820:	b480      	push	{r7}
  400822:	b085      	sub	sp, #20
  400824:	af00      	add	r7, sp, #0
  400826:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400828:	491c      	ldr	r1, [pc, #112]	; (40089c <pmc_switch_mck_to_pllack+0x7c>)
  40082a:	4b1c      	ldr	r3, [pc, #112]	; (40089c <pmc_switch_mck_to_pllack+0x7c>)
  40082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40082e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400832:	687b      	ldr	r3, [r7, #4]
  400834:	4313      	orrs	r3, r2
  400836:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400838:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40083c:	60fb      	str	r3, [r7, #12]
  40083e:	e007      	b.n	400850 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400840:	68fb      	ldr	r3, [r7, #12]
  400842:	2b00      	cmp	r3, #0
  400844:	d101      	bne.n	40084a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400846:	2301      	movs	r3, #1
  400848:	e023      	b.n	400892 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40084a:	68fb      	ldr	r3, [r7, #12]
  40084c:	3b01      	subs	r3, #1
  40084e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400850:	4b12      	ldr	r3, [pc, #72]	; (40089c <pmc_switch_mck_to_pllack+0x7c>)
  400852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400854:	f003 0308 	and.w	r3, r3, #8
  400858:	2b00      	cmp	r3, #0
  40085a:	d0f1      	beq.n	400840 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40085c:	4a0f      	ldr	r2, [pc, #60]	; (40089c <pmc_switch_mck_to_pllack+0x7c>)
  40085e:	4b0f      	ldr	r3, [pc, #60]	; (40089c <pmc_switch_mck_to_pllack+0x7c>)
  400860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400862:	f023 0303 	bic.w	r3, r3, #3
  400866:	f043 0302 	orr.w	r3, r3, #2
  40086a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40086c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400870:	60fb      	str	r3, [r7, #12]
  400872:	e007      	b.n	400884 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400874:	68fb      	ldr	r3, [r7, #12]
  400876:	2b00      	cmp	r3, #0
  400878:	d101      	bne.n	40087e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40087a:	2301      	movs	r3, #1
  40087c:	e009      	b.n	400892 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40087e:	68fb      	ldr	r3, [r7, #12]
  400880:	3b01      	subs	r3, #1
  400882:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400884:	4b05      	ldr	r3, [pc, #20]	; (40089c <pmc_switch_mck_to_pllack+0x7c>)
  400886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400888:	f003 0308 	and.w	r3, r3, #8
  40088c:	2b00      	cmp	r3, #0
  40088e:	d0f1      	beq.n	400874 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  400890:	2300      	movs	r3, #0
}
  400892:	4618      	mov	r0, r3
  400894:	3714      	adds	r7, #20
  400896:	46bd      	mov	sp, r7
  400898:	bc80      	pop	{r7}
  40089a:	4770      	bx	lr
  40089c:	400e0400 	.word	0x400e0400

004008a0 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4008a0:	b480      	push	{r7}
  4008a2:	b083      	sub	sp, #12
  4008a4:	af00      	add	r7, sp, #0
  4008a6:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4008a8:	687b      	ldr	r3, [r7, #4]
  4008aa:	2b01      	cmp	r3, #1
  4008ac:	d107      	bne.n	4008be <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4008ae:	4a08      	ldr	r2, [pc, #32]	; (4008d0 <pmc_switch_sclk_to_32kxtal+0x30>)
  4008b0:	4b07      	ldr	r3, [pc, #28]	; (4008d0 <pmc_switch_sclk_to_32kxtal+0x30>)
  4008b2:	689b      	ldr	r3, [r3, #8]
  4008b4:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4008b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4008bc:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4008be:	4b04      	ldr	r3, [pc, #16]	; (4008d0 <pmc_switch_sclk_to_32kxtal+0x30>)
  4008c0:	4a04      	ldr	r2, [pc, #16]	; (4008d4 <pmc_switch_sclk_to_32kxtal+0x34>)
  4008c2:	601a      	str	r2, [r3, #0]
}
  4008c4:	bf00      	nop
  4008c6:	370c      	adds	r7, #12
  4008c8:	46bd      	mov	sp, r7
  4008ca:	bc80      	pop	{r7}
  4008cc:	4770      	bx	lr
  4008ce:	bf00      	nop
  4008d0:	400e1410 	.word	0x400e1410
  4008d4:	a5000008 	.word	0xa5000008

004008d8 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4008d8:	b480      	push	{r7}
  4008da:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4008dc:	4b09      	ldr	r3, [pc, #36]	; (400904 <pmc_osc_is_ready_32kxtal+0x2c>)
  4008de:	695b      	ldr	r3, [r3, #20]
  4008e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4008e4:	2b00      	cmp	r3, #0
  4008e6:	d007      	beq.n	4008f8 <pmc_osc_is_ready_32kxtal+0x20>
  4008e8:	4b07      	ldr	r3, [pc, #28]	; (400908 <pmc_osc_is_ready_32kxtal+0x30>)
  4008ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4008ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4008f0:	2b00      	cmp	r3, #0
  4008f2:	d001      	beq.n	4008f8 <pmc_osc_is_ready_32kxtal+0x20>
  4008f4:	2301      	movs	r3, #1
  4008f6:	e000      	b.n	4008fa <pmc_osc_is_ready_32kxtal+0x22>
  4008f8:	2300      	movs	r3, #0
}
  4008fa:	4618      	mov	r0, r3
  4008fc:	46bd      	mov	sp, r7
  4008fe:	bc80      	pop	{r7}
  400900:	4770      	bx	lr
  400902:	bf00      	nop
  400904:	400e1410 	.word	0x400e1410
  400908:	400e0400 	.word	0x400e0400

0040090c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  40090c:	b480      	push	{r7}
  40090e:	b083      	sub	sp, #12
  400910:	af00      	add	r7, sp, #0
  400912:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400914:	4a18      	ldr	r2, [pc, #96]	; (400978 <pmc_switch_mainck_to_fastrc+0x6c>)
  400916:	4b18      	ldr	r3, [pc, #96]	; (400978 <pmc_switch_mainck_to_fastrc+0x6c>)
  400918:	6a1b      	ldr	r3, [r3, #32]
  40091a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40091e:	f043 0308 	orr.w	r3, r3, #8
  400922:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400924:	bf00      	nop
  400926:	4b14      	ldr	r3, [pc, #80]	; (400978 <pmc_switch_mainck_to_fastrc+0x6c>)
  400928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40092a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40092e:	2b00      	cmp	r3, #0
  400930:	d0f9      	beq.n	400926 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400932:	4911      	ldr	r1, [pc, #68]	; (400978 <pmc_switch_mainck_to_fastrc+0x6c>)
  400934:	4b10      	ldr	r3, [pc, #64]	; (400978 <pmc_switch_mainck_to_fastrc+0x6c>)
  400936:	6a1b      	ldr	r3, [r3, #32]
  400938:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40093c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400940:	687a      	ldr	r2, [r7, #4]
  400942:	4313      	orrs	r3, r2
  400944:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400948:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40094a:	bf00      	nop
  40094c:	4b0a      	ldr	r3, [pc, #40]	; (400978 <pmc_switch_mainck_to_fastrc+0x6c>)
  40094e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400954:	2b00      	cmp	r3, #0
  400956:	d0f9      	beq.n	40094c <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400958:	4a07      	ldr	r2, [pc, #28]	; (400978 <pmc_switch_mainck_to_fastrc+0x6c>)
  40095a:	4b07      	ldr	r3, [pc, #28]	; (400978 <pmc_switch_mainck_to_fastrc+0x6c>)
  40095c:	6a1b      	ldr	r3, [r3, #32]
  40095e:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  400962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  400966:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40096a:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  40096c:	bf00      	nop
  40096e:	370c      	adds	r7, #12
  400970:	46bd      	mov	sp, r7
  400972:	bc80      	pop	{r7}
  400974:	4770      	bx	lr
  400976:	bf00      	nop
  400978:	400e0400 	.word	0x400e0400

0040097c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  40097c:	b480      	push	{r7}
  40097e:	b083      	sub	sp, #12
  400980:	af00      	add	r7, sp, #0
  400982:	6078      	str	r0, [r7, #4]
  400984:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400986:	687b      	ldr	r3, [r7, #4]
  400988:	2b00      	cmp	r3, #0
  40098a:	d008      	beq.n	40099e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40098c:	4916      	ldr	r1, [pc, #88]	; (4009e8 <pmc_switch_mainck_to_xtal+0x6c>)
  40098e:	4b16      	ldr	r3, [pc, #88]	; (4009e8 <pmc_switch_mainck_to_xtal+0x6c>)
  400990:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400992:	4a16      	ldr	r2, [pc, #88]	; (4009ec <pmc_switch_mainck_to_xtal+0x70>)
  400994:	401a      	ands	r2, r3
  400996:	4b16      	ldr	r3, [pc, #88]	; (4009f0 <pmc_switch_mainck_to_xtal+0x74>)
  400998:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40099a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  40099c:	e01e      	b.n	4009dc <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40099e:	4912      	ldr	r1, [pc, #72]	; (4009e8 <pmc_switch_mainck_to_xtal+0x6c>)
  4009a0:	4b11      	ldr	r3, [pc, #68]	; (4009e8 <pmc_switch_mainck_to_xtal+0x6c>)
  4009a2:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4009a4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4009a8:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4009ac:	683a      	ldr	r2, [r7, #0]
  4009ae:	0212      	lsls	r2, r2, #8
  4009b0:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4009b2:	4313      	orrs	r3, r2
  4009b4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4009b8:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4009bc:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4009be:	bf00      	nop
  4009c0:	4b09      	ldr	r3, [pc, #36]	; (4009e8 <pmc_switch_mainck_to_xtal+0x6c>)
  4009c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4009c4:	f003 0301 	and.w	r3, r3, #1
  4009c8:	2b00      	cmp	r3, #0
  4009ca:	d0f9      	beq.n	4009c0 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4009cc:	4a06      	ldr	r2, [pc, #24]	; (4009e8 <pmc_switch_mainck_to_xtal+0x6c>)
  4009ce:	4b06      	ldr	r3, [pc, #24]	; (4009e8 <pmc_switch_mainck_to_xtal+0x6c>)
  4009d0:	6a1b      	ldr	r3, [r3, #32]
  4009d2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4009d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4009da:	6213      	str	r3, [r2, #32]
}
  4009dc:	bf00      	nop
  4009de:	370c      	adds	r7, #12
  4009e0:	46bd      	mov	sp, r7
  4009e2:	bc80      	pop	{r7}
  4009e4:	4770      	bx	lr
  4009e6:	bf00      	nop
  4009e8:	400e0400 	.word	0x400e0400
  4009ec:	fec8fffc 	.word	0xfec8fffc
  4009f0:	01370002 	.word	0x01370002

004009f4 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4009f4:	b480      	push	{r7}
  4009f6:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4009f8:	4b03      	ldr	r3, [pc, #12]	; (400a08 <pmc_osc_is_ready_mainck+0x14>)
  4009fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4009fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  400a00:	4618      	mov	r0, r3
  400a02:	46bd      	mov	sp, r7
  400a04:	bc80      	pop	{r7}
  400a06:	4770      	bx	lr
  400a08:	400e0400 	.word	0x400e0400

00400a0c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  400a0c:	b480      	push	{r7}
  400a0e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400a10:	4b03      	ldr	r3, [pc, #12]	; (400a20 <pmc_disable_pllack+0x14>)
  400a12:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400a16:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  400a18:	bf00      	nop
  400a1a:	46bd      	mov	sp, r7
  400a1c:	bc80      	pop	{r7}
  400a1e:	4770      	bx	lr
  400a20:	400e0400 	.word	0x400e0400

00400a24 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  400a24:	b480      	push	{r7}
  400a26:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400a28:	4b03      	ldr	r3, [pc, #12]	; (400a38 <pmc_is_locked_pllack+0x14>)
  400a2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400a2c:	f003 0302 	and.w	r3, r3, #2
}
  400a30:	4618      	mov	r0, r3
  400a32:	46bd      	mov	sp, r7
  400a34:	bc80      	pop	{r7}
  400a36:	4770      	bx	lr
  400a38:	400e0400 	.word	0x400e0400

00400a3c <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  400a3c:	b480      	push	{r7}
  400a3e:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  400a40:	4b03      	ldr	r3, [pc, #12]	; (400a50 <pmc_disable_pllbck+0x14>)
  400a42:	2200      	movs	r2, #0
  400a44:	62da      	str	r2, [r3, #44]	; 0x2c
}
  400a46:	bf00      	nop
  400a48:	46bd      	mov	sp, r7
  400a4a:	bc80      	pop	{r7}
  400a4c:	4770      	bx	lr
  400a4e:	bf00      	nop
  400a50:	400e0400 	.word	0x400e0400

00400a54 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  400a54:	b480      	push	{r7}
  400a56:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  400a58:	4b03      	ldr	r3, [pc, #12]	; (400a68 <pmc_is_locked_pllbck+0x14>)
  400a5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400a5c:	f003 0304 	and.w	r3, r3, #4
}
  400a60:	4618      	mov	r0, r3
  400a62:	46bd      	mov	sp, r7
  400a64:	bc80      	pop	{r7}
  400a66:	4770      	bx	lr
  400a68:	400e0400 	.word	0x400e0400

00400a6c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  400a6c:	b480      	push	{r7}
  400a6e:	b083      	sub	sp, #12
  400a70:	af00      	add	r7, sp, #0
  400a72:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400a74:	687b      	ldr	r3, [r7, #4]
  400a76:	2b22      	cmp	r3, #34	; 0x22
  400a78:	d901      	bls.n	400a7e <pmc_enable_periph_clk+0x12>
		return 1;
  400a7a:	2301      	movs	r3, #1
  400a7c:	e02f      	b.n	400ade <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  400a7e:	687b      	ldr	r3, [r7, #4]
  400a80:	2b1f      	cmp	r3, #31
  400a82:	d813      	bhi.n	400aac <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400a84:	4b18      	ldr	r3, [pc, #96]	; (400ae8 <pmc_enable_periph_clk+0x7c>)
  400a86:	699a      	ldr	r2, [r3, #24]
  400a88:	2101      	movs	r1, #1
  400a8a:	687b      	ldr	r3, [r7, #4]
  400a8c:	fa01 f303 	lsl.w	r3, r1, r3
  400a90:	401a      	ands	r2, r3
  400a92:	2101      	movs	r1, #1
  400a94:	687b      	ldr	r3, [r7, #4]
  400a96:	fa01 f303 	lsl.w	r3, r1, r3
  400a9a:	429a      	cmp	r2, r3
  400a9c:	d01e      	beq.n	400adc <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  400a9e:	4a12      	ldr	r2, [pc, #72]	; (400ae8 <pmc_enable_periph_clk+0x7c>)
  400aa0:	2101      	movs	r1, #1
  400aa2:	687b      	ldr	r3, [r7, #4]
  400aa4:	fa01 f303 	lsl.w	r3, r1, r3
  400aa8:	6113      	str	r3, [r2, #16]
  400aaa:	e017      	b.n	400adc <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400aac:	687b      	ldr	r3, [r7, #4]
  400aae:	3b20      	subs	r3, #32
  400ab0:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400ab2:	4b0d      	ldr	r3, [pc, #52]	; (400ae8 <pmc_enable_periph_clk+0x7c>)
  400ab4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400ab8:	2101      	movs	r1, #1
  400aba:	687b      	ldr	r3, [r7, #4]
  400abc:	fa01 f303 	lsl.w	r3, r1, r3
  400ac0:	401a      	ands	r2, r3
  400ac2:	2101      	movs	r1, #1
  400ac4:	687b      	ldr	r3, [r7, #4]
  400ac6:	fa01 f303 	lsl.w	r3, r1, r3
  400aca:	429a      	cmp	r2, r3
  400acc:	d006      	beq.n	400adc <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  400ace:	4a06      	ldr	r2, [pc, #24]	; (400ae8 <pmc_enable_periph_clk+0x7c>)
  400ad0:	2101      	movs	r1, #1
  400ad2:	687b      	ldr	r3, [r7, #4]
  400ad4:	fa01 f303 	lsl.w	r3, r1, r3
  400ad8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  400adc:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400ade:	4618      	mov	r0, r3
  400ae0:	370c      	adds	r7, #12
  400ae2:	46bd      	mov	sp, r7
  400ae4:	bc80      	pop	{r7}
  400ae6:	4770      	bx	lr
  400ae8:	400e0400 	.word	0x400e0400

00400aec <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400aec:	b580      	push	{r7, lr}
  400aee:	b082      	sub	sp, #8
  400af0:	af00      	add	r7, sp, #0
  400af2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400af4:	6878      	ldr	r0, [r7, #4]
  400af6:	4b03      	ldr	r3, [pc, #12]	; (400b04 <sysclk_enable_peripheral_clock+0x18>)
  400af8:	4798      	blx	r3
}
  400afa:	bf00      	nop
  400afc:	3708      	adds	r7, #8
  400afe:	46bd      	mov	sp, r7
  400b00:	bd80      	pop	{r7, pc}
  400b02:	bf00      	nop
  400b04:	00400a6d 	.word	0x00400a6d

00400b08 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  400b08:	b580      	push	{r7, lr}
  400b0a:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  400b0c:	200b      	movs	r0, #11
  400b0e:	4b03      	ldr	r3, [pc, #12]	; (400b1c <ioport_init+0x14>)
  400b10:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  400b12:	200c      	movs	r0, #12
  400b14:	4b01      	ldr	r3, [pc, #4]	; (400b1c <ioport_init+0x14>)
  400b16:	4798      	blx	r3
	arch_ioport_init();
}
  400b18:	bf00      	nop
  400b1a:	bd80      	pop	{r7, pc}
  400b1c:	00400aed 	.word	0x00400aed

00400b20 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400b20:	b480      	push	{r7}
  400b22:	b08d      	sub	sp, #52	; 0x34
  400b24:	af00      	add	r7, sp, #0
  400b26:	6078      	str	r0, [r7, #4]
  400b28:	6039      	str	r1, [r7, #0]
  400b2a:	687b      	ldr	r3, [r7, #4]
  400b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  400b2e:	683b      	ldr	r3, [r7, #0]
  400b30:	62bb      	str	r3, [r7, #40]	; 0x28
  400b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400b34:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  400b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400b38:	095a      	lsrs	r2, r3, #5
  400b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400b3c:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400b3e:	6a3b      	ldr	r3, [r7, #32]
  400b40:	f003 031f 	and.w	r3, r3, #31
  400b44:	2101      	movs	r1, #1
  400b46:	fa01 f303 	lsl.w	r3, r1, r3
  400b4a:	61fa      	str	r2, [r7, #28]
  400b4c:	61bb      	str	r3, [r7, #24]
  400b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400b50:	617b      	str	r3, [r7, #20]
  400b52:	69fb      	ldr	r3, [r7, #28]
  400b54:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400b56:	693b      	ldr	r3, [r7, #16]
  400b58:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400b5c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400b60:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  400b62:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  400b64:	697b      	ldr	r3, [r7, #20]
  400b66:	f003 0308 	and.w	r3, r3, #8
  400b6a:	2b00      	cmp	r3, #0
  400b6c:	d003      	beq.n	400b76 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  400b6e:	68fb      	ldr	r3, [r7, #12]
  400b70:	69ba      	ldr	r2, [r7, #24]
  400b72:	665a      	str	r2, [r3, #100]	; 0x64
  400b74:	e002      	b.n	400b7c <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  400b76:	68fb      	ldr	r3, [r7, #12]
  400b78:	69ba      	ldr	r2, [r7, #24]
  400b7a:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  400b7c:	697b      	ldr	r3, [r7, #20]
  400b7e:	f003 0310 	and.w	r3, r3, #16
  400b82:	2b00      	cmp	r3, #0
  400b84:	d004      	beq.n	400b90 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  400b86:	68fb      	ldr	r3, [r7, #12]
  400b88:	69ba      	ldr	r2, [r7, #24]
  400b8a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  400b8e:	e003      	b.n	400b98 <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  400b90:	68fb      	ldr	r3, [r7, #12]
  400b92:	69ba      	ldr	r2, [r7, #24]
  400b94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400b98:	697b      	ldr	r3, [r7, #20]
  400b9a:	f003 0320 	and.w	r3, r3, #32
  400b9e:	2b00      	cmp	r3, #0
  400ba0:	d003      	beq.n	400baa <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  400ba2:	68fb      	ldr	r3, [r7, #12]
  400ba4:	69ba      	ldr	r2, [r7, #24]
  400ba6:	651a      	str	r2, [r3, #80]	; 0x50
  400ba8:	e002      	b.n	400bb0 <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  400baa:	68fb      	ldr	r3, [r7, #12]
  400bac:	69ba      	ldr	r2, [r7, #24]
  400bae:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400bb0:	697b      	ldr	r3, [r7, #20]
  400bb2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400bb6:	2b00      	cmp	r3, #0
  400bb8:	d003      	beq.n	400bc2 <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  400bba:	68fb      	ldr	r3, [r7, #12]
  400bbc:	69ba      	ldr	r2, [r7, #24]
  400bbe:	621a      	str	r2, [r3, #32]
  400bc0:	e002      	b.n	400bc8 <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  400bc2:	68fb      	ldr	r3, [r7, #12]
  400bc4:	69ba      	ldr	r2, [r7, #24]
  400bc6:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400bc8:	697b      	ldr	r3, [r7, #20]
  400bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400bce:	2b00      	cmp	r3, #0
  400bd0:	d004      	beq.n	400bdc <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400bd2:	68fb      	ldr	r3, [r7, #12]
  400bd4:	69ba      	ldr	r2, [r7, #24]
  400bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400bda:	e003      	b.n	400be4 <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400bdc:	68fb      	ldr	r3, [r7, #12]
  400bde:	69ba      	ldr	r2, [r7, #24]
  400be0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400be4:	697b      	ldr	r3, [r7, #20]
  400be6:	f003 0301 	and.w	r3, r3, #1
  400bea:	2b00      	cmp	r3, #0
  400bec:	d006      	beq.n	400bfc <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  400bee:	68fb      	ldr	r3, [r7, #12]
  400bf0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400bf2:	69bb      	ldr	r3, [r7, #24]
  400bf4:	431a      	orrs	r2, r3
  400bf6:	68fb      	ldr	r3, [r7, #12]
  400bf8:	671a      	str	r2, [r3, #112]	; 0x70
  400bfa:	e006      	b.n	400c0a <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400bfc:	68fb      	ldr	r3, [r7, #12]
  400bfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400c00:	69bb      	ldr	r3, [r7, #24]
  400c02:	43db      	mvns	r3, r3
  400c04:	401a      	ands	r2, r3
  400c06:	68fb      	ldr	r3, [r7, #12]
  400c08:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400c0a:	697b      	ldr	r3, [r7, #20]
  400c0c:	f003 0302 	and.w	r3, r3, #2
  400c10:	2b00      	cmp	r3, #0
  400c12:	d006      	beq.n	400c22 <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  400c14:	68fb      	ldr	r3, [r7, #12]
  400c16:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400c18:	69bb      	ldr	r3, [r7, #24]
  400c1a:	431a      	orrs	r2, r3
  400c1c:	68fb      	ldr	r3, [r7, #12]
  400c1e:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  400c20:	e006      	b.n	400c30 <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400c22:	68fb      	ldr	r3, [r7, #12]
  400c24:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400c26:	69bb      	ldr	r3, [r7, #24]
  400c28:	43db      	mvns	r3, r3
  400c2a:	401a      	ands	r2, r3
  400c2c:	68fb      	ldr	r3, [r7, #12]
  400c2e:	675a      	str	r2, [r3, #116]	; 0x74
  400c30:	bf00      	nop
  400c32:	3734      	adds	r7, #52	; 0x34
  400c34:	46bd      	mov	sp, r7
  400c36:	bc80      	pop	{r7}
  400c38:	4770      	bx	lr

00400c3a <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  400c3a:	b480      	push	{r7}
  400c3c:	b08d      	sub	sp, #52	; 0x34
  400c3e:	af00      	add	r7, sp, #0
  400c40:	6078      	str	r0, [r7, #4]
  400c42:	460b      	mov	r3, r1
  400c44:	70fb      	strb	r3, [r7, #3]
  400c46:	687b      	ldr	r3, [r7, #4]
  400c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  400c4a:	78fb      	ldrb	r3, [r7, #3]
  400c4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400c52:	627b      	str	r3, [r7, #36]	; 0x24
  400c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400c56:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  400c58:	6a3b      	ldr	r3, [r7, #32]
  400c5a:	095b      	lsrs	r3, r3, #5
  400c5c:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400c5e:	69fb      	ldr	r3, [r7, #28]
  400c60:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400c64:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400c68:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400c6a:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  400c6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400c70:	2b01      	cmp	r3, #1
  400c72:	d109      	bne.n	400c88 <ioport_set_pin_dir+0x4e>
  400c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400c76:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  400c78:	697b      	ldr	r3, [r7, #20]
  400c7a:	f003 031f 	and.w	r3, r3, #31
  400c7e:	2201      	movs	r2, #1
  400c80:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400c82:	69bb      	ldr	r3, [r7, #24]
  400c84:	611a      	str	r2, [r3, #16]
  400c86:	e00c      	b.n	400ca2 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  400c88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400c8c:	2b00      	cmp	r3, #0
  400c8e:	d108      	bne.n	400ca2 <ioport_set_pin_dir+0x68>
  400c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400c92:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400c94:	693b      	ldr	r3, [r7, #16]
  400c96:	f003 031f 	and.w	r3, r3, #31
  400c9a:	2201      	movs	r2, #1
  400c9c:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400c9e:	69bb      	ldr	r3, [r7, #24]
  400ca0:	615a      	str	r2, [r3, #20]
  400ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400ca4:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400ca6:	68fb      	ldr	r3, [r7, #12]
  400ca8:	f003 031f 	and.w	r3, r3, #31
  400cac:	2201      	movs	r2, #1
  400cae:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400cb0:	69bb      	ldr	r3, [r7, #24]
  400cb2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400cb6:	bf00      	nop
  400cb8:	3734      	adds	r7, #52	; 0x34
  400cba:	46bd      	mov	sp, r7
  400cbc:	bc80      	pop	{r7}
  400cbe:	4770      	bx	lr

00400cc0 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  400cc0:	b580      	push	{r7, lr}
  400cc2:	af00      	add	r7, sp, #0
	ioport_init();
  400cc4:	4b07      	ldr	r3, [pc, #28]	; (400ce4 <board_init+0x24>)
  400cc6:	4798      	blx	r3
	ioport_set_pin_dir(LED_PIN, IOPORT_DIR_OUTPUT);
  400cc8:	2101      	movs	r1, #1
  400cca:	2017      	movs	r0, #23
  400ccc:	4b06      	ldr	r3, [pc, #24]	; (400ce8 <board_init+0x28>)
  400cce:	4798      	blx	r3
	
	ioport_set_pin_dir(BUTTON_PIN, IOPORT_DIR_INPUT);
  400cd0:	2100      	movs	r1, #0
  400cd2:	2016      	movs	r0, #22
  400cd4:	4b04      	ldr	r3, [pc, #16]	; (400ce8 <board_init+0x28>)
  400cd6:	4798      	blx	r3
	ioport_set_pin_mode(BUTTON_PIN, IOPORT_MODE_PULLDOWN);
  400cd8:	2110      	movs	r1, #16
  400cda:	2016      	movs	r0, #22
  400cdc:	4b03      	ldr	r3, [pc, #12]	; (400cec <board_init+0x2c>)
  400cde:	4798      	blx	r3
}
  400ce0:	bf00      	nop
  400ce2:	bd80      	pop	{r7, pc}
  400ce4:	00400b09 	.word	0x00400b09
  400ce8:	00400c3b 	.word	0x00400c3b
  400cec:	00400b21 	.word	0x00400b21

00400cf0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400cf0:	b580      	push	{r7, lr}
  400cf2:	b084      	sub	sp, #16
  400cf4:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  400cf6:	4b27      	ldr	r3, [pc, #156]	; (400d94 <Reset_Handler+0xa4>)
  400cf8:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  400cfa:	4b27      	ldr	r3, [pc, #156]	; (400d98 <Reset_Handler+0xa8>)
  400cfc:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  400cfe:	68fa      	ldr	r2, [r7, #12]
  400d00:	68bb      	ldr	r3, [r7, #8]
  400d02:	429a      	cmp	r2, r3
  400d04:	d90d      	bls.n	400d22 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  400d06:	e007      	b.n	400d18 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  400d08:	68bb      	ldr	r3, [r7, #8]
  400d0a:	1d1a      	adds	r2, r3, #4
  400d0c:	60ba      	str	r2, [r7, #8]
  400d0e:	68fa      	ldr	r2, [r7, #12]
  400d10:	1d11      	adds	r1, r2, #4
  400d12:	60f9      	str	r1, [r7, #12]
  400d14:	6812      	ldr	r2, [r2, #0]
  400d16:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  400d18:	68bb      	ldr	r3, [r7, #8]
  400d1a:	4a20      	ldr	r2, [pc, #128]	; (400d9c <Reset_Handler+0xac>)
  400d1c:	4293      	cmp	r3, r2
  400d1e:	d3f3      	bcc.n	400d08 <Reset_Handler+0x18>
  400d20:	e020      	b.n	400d64 <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  400d22:	68fa      	ldr	r2, [r7, #12]
  400d24:	68bb      	ldr	r3, [r7, #8]
  400d26:	429a      	cmp	r2, r3
  400d28:	d21c      	bcs.n	400d64 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400d2a:	4a1c      	ldr	r2, [pc, #112]	; (400d9c <Reset_Handler+0xac>)
  400d2c:	4b1a      	ldr	r3, [pc, #104]	; (400d98 <Reset_Handler+0xa8>)
  400d2e:	1ad3      	subs	r3, r2, r3
  400d30:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400d32:	68fa      	ldr	r2, [r7, #12]
  400d34:	687b      	ldr	r3, [r7, #4]
  400d36:	4413      	add	r3, r2
  400d38:	3b04      	subs	r3, #4
  400d3a:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  400d3c:	68ba      	ldr	r2, [r7, #8]
  400d3e:	687b      	ldr	r3, [r7, #4]
  400d40:	4413      	add	r3, r2
  400d42:	3b04      	subs	r3, #4
  400d44:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  400d46:	e00a      	b.n	400d5e <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  400d48:	68bb      	ldr	r3, [r7, #8]
  400d4a:	1f1a      	subs	r2, r3, #4
  400d4c:	60ba      	str	r2, [r7, #8]
  400d4e:	68fa      	ldr	r2, [r7, #12]
  400d50:	1f11      	subs	r1, r2, #4
  400d52:	60f9      	str	r1, [r7, #12]
  400d54:	6812      	ldr	r2, [r2, #0]
  400d56:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  400d58:	687b      	ldr	r3, [r7, #4]
  400d5a:	3b04      	subs	r3, #4
  400d5c:	607b      	str	r3, [r7, #4]
  400d5e:	687b      	ldr	r3, [r7, #4]
  400d60:	2b00      	cmp	r3, #0
  400d62:	d1f1      	bne.n	400d48 <Reset_Handler+0x58>
		}
	}
	__NOP();
  400d64:	bf00      	nop

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400d66:	4b0e      	ldr	r3, [pc, #56]	; (400da0 <Reset_Handler+0xb0>)
  400d68:	60bb      	str	r3, [r7, #8]
  400d6a:	e004      	b.n	400d76 <Reset_Handler+0x86>
		*pDest++ = 0;
  400d6c:	68bb      	ldr	r3, [r7, #8]
  400d6e:	1d1a      	adds	r2, r3, #4
  400d70:	60ba      	str	r2, [r7, #8]
  400d72:	2200      	movs	r2, #0
  400d74:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  400d76:	68bb      	ldr	r3, [r7, #8]
  400d78:	4a0a      	ldr	r2, [pc, #40]	; (400da4 <Reset_Handler+0xb4>)
  400d7a:	4293      	cmp	r3, r2
  400d7c:	d3f6      	bcc.n	400d6c <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  400d7e:	4b0a      	ldr	r3, [pc, #40]	; (400da8 <Reset_Handler+0xb8>)
  400d80:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  400d82:	4a0a      	ldr	r2, [pc, #40]	; (400dac <Reset_Handler+0xbc>)
  400d84:	68fb      	ldr	r3, [r7, #12]
  400d86:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  400d88:	4b09      	ldr	r3, [pc, #36]	; (400db0 <Reset_Handler+0xc0>)
  400d8a:	4798      	blx	r3

	/* Branch to main function */
	main();
  400d8c:	4b09      	ldr	r3, [pc, #36]	; (400db4 <Reset_Handler+0xc4>)
  400d8e:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  400d90:	e7fe      	b.n	400d90 <Reset_Handler+0xa0>
  400d92:	bf00      	nop
  400d94:	004016d0 	.word	0x004016d0
  400d98:	20000000 	.word	0x20000000
  400d9c:	20000444 	.word	0x20000444
  400da0:	20000444 	.word	0x20000444
  400da4:	20000504 	.word	0x20000504
  400da8:	00400000 	.word	0x00400000
  400dac:	e000ed00 	.word	0xe000ed00
  400db0:	00401531 	.word	0x00401531
  400db4:	004010fd 	.word	0x004010fd

00400db8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400db8:	b480      	push	{r7}
  400dba:	af00      	add	r7, sp, #0
	while (1) {
  400dbc:	e7fe      	b.n	400dbc <Dummy_Handler+0x4>
	...

00400dc0 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  400dc0:	b480      	push	{r7}
  400dc2:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400dc4:	4b5d      	ldr	r3, [pc, #372]	; (400f3c <SystemCoreClockUpdate+0x17c>)
  400dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400dc8:	f003 0303 	and.w	r3, r3, #3
  400dcc:	2b03      	cmp	r3, #3
  400dce:	f200 8096 	bhi.w	400efe <SystemCoreClockUpdate+0x13e>
  400dd2:	a201      	add	r2, pc, #4	; (adr r2, 400dd8 <SystemCoreClockUpdate+0x18>)
  400dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400dd8:	00400de9 	.word	0x00400de9
  400ddc:	00400e09 	.word	0x00400e09
  400de0:	00400e53 	.word	0x00400e53
  400de4:	00400e53 	.word	0x00400e53
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400de8:	4b55      	ldr	r3, [pc, #340]	; (400f40 <SystemCoreClockUpdate+0x180>)
  400dea:	695b      	ldr	r3, [r3, #20]
  400dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400df0:	2b00      	cmp	r3, #0
  400df2:	d004      	beq.n	400dfe <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400df4:	4b53      	ldr	r3, [pc, #332]	; (400f44 <SystemCoreClockUpdate+0x184>)
  400df6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400dfa:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  400dfc:	e080      	b.n	400f00 <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400dfe:	4b51      	ldr	r3, [pc, #324]	; (400f44 <SystemCoreClockUpdate+0x184>)
  400e00:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  400e04:	601a      	str	r2, [r3, #0]
		break;
  400e06:	e07b      	b.n	400f00 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400e08:	4b4c      	ldr	r3, [pc, #304]	; (400f3c <SystemCoreClockUpdate+0x17c>)
  400e0a:	6a1b      	ldr	r3, [r3, #32]
  400e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  400e10:	2b00      	cmp	r3, #0
  400e12:	d003      	beq.n	400e1c <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400e14:	4b4b      	ldr	r3, [pc, #300]	; (400f44 <SystemCoreClockUpdate+0x184>)
  400e16:	4a4c      	ldr	r2, [pc, #304]	; (400f48 <SystemCoreClockUpdate+0x188>)
  400e18:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  400e1a:	e071      	b.n	400f00 <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400e1c:	4b49      	ldr	r3, [pc, #292]	; (400f44 <SystemCoreClockUpdate+0x184>)
  400e1e:	4a4b      	ldr	r2, [pc, #300]	; (400f4c <SystemCoreClockUpdate+0x18c>)
  400e20:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400e22:	4b46      	ldr	r3, [pc, #280]	; (400f3c <SystemCoreClockUpdate+0x17c>)
  400e24:	6a1b      	ldr	r3, [r3, #32]
  400e26:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e2a:	2b10      	cmp	r3, #16
  400e2c:	d008      	beq.n	400e40 <SystemCoreClockUpdate+0x80>
  400e2e:	2b20      	cmp	r3, #32
  400e30:	d00a      	beq.n	400e48 <SystemCoreClockUpdate+0x88>
  400e32:	2b00      	cmp	r3, #0
  400e34:	d000      	beq.n	400e38 <SystemCoreClockUpdate+0x78>
			break;
  400e36:	e00b      	b.n	400e50 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400e38:	4b42      	ldr	r3, [pc, #264]	; (400f44 <SystemCoreClockUpdate+0x184>)
  400e3a:	4a44      	ldr	r2, [pc, #272]	; (400f4c <SystemCoreClockUpdate+0x18c>)
  400e3c:	601a      	str	r2, [r3, #0]
			break;
  400e3e:	e007      	b.n	400e50 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400e40:	4b40      	ldr	r3, [pc, #256]	; (400f44 <SystemCoreClockUpdate+0x184>)
  400e42:	4a43      	ldr	r2, [pc, #268]	; (400f50 <SystemCoreClockUpdate+0x190>)
  400e44:	601a      	str	r2, [r3, #0]
			break;
  400e46:	e003      	b.n	400e50 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400e48:	4b3e      	ldr	r3, [pc, #248]	; (400f44 <SystemCoreClockUpdate+0x184>)
  400e4a:	4a3f      	ldr	r2, [pc, #252]	; (400f48 <SystemCoreClockUpdate+0x188>)
  400e4c:	601a      	str	r2, [r3, #0]
			break;
  400e4e:	bf00      	nop
		break;
  400e50:	e056      	b.n	400f00 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400e52:	4b3a      	ldr	r3, [pc, #232]	; (400f3c <SystemCoreClockUpdate+0x17c>)
  400e54:	6a1b      	ldr	r3, [r3, #32]
  400e56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  400e5a:	2b00      	cmp	r3, #0
  400e5c:	d003      	beq.n	400e66 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400e5e:	4b39      	ldr	r3, [pc, #228]	; (400f44 <SystemCoreClockUpdate+0x184>)
  400e60:	4a39      	ldr	r2, [pc, #228]	; (400f48 <SystemCoreClockUpdate+0x188>)
  400e62:	601a      	str	r2, [r3, #0]
  400e64:	e019      	b.n	400e9a <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400e66:	4b37      	ldr	r3, [pc, #220]	; (400f44 <SystemCoreClockUpdate+0x184>)
  400e68:	4a38      	ldr	r2, [pc, #224]	; (400f4c <SystemCoreClockUpdate+0x18c>)
  400e6a:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400e6c:	4b33      	ldr	r3, [pc, #204]	; (400f3c <SystemCoreClockUpdate+0x17c>)
  400e6e:	6a1b      	ldr	r3, [r3, #32]
  400e70:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e74:	2b10      	cmp	r3, #16
  400e76:	d008      	beq.n	400e8a <SystemCoreClockUpdate+0xca>
  400e78:	2b20      	cmp	r3, #32
  400e7a:	d00a      	beq.n	400e92 <SystemCoreClockUpdate+0xd2>
  400e7c:	2b00      	cmp	r3, #0
  400e7e:	d000      	beq.n	400e82 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  400e80:	e00b      	b.n	400e9a <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400e82:	4b30      	ldr	r3, [pc, #192]	; (400f44 <SystemCoreClockUpdate+0x184>)
  400e84:	4a31      	ldr	r2, [pc, #196]	; (400f4c <SystemCoreClockUpdate+0x18c>)
  400e86:	601a      	str	r2, [r3, #0]
					break;
  400e88:	e007      	b.n	400e9a <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400e8a:	4b2e      	ldr	r3, [pc, #184]	; (400f44 <SystemCoreClockUpdate+0x184>)
  400e8c:	4a30      	ldr	r2, [pc, #192]	; (400f50 <SystemCoreClockUpdate+0x190>)
  400e8e:	601a      	str	r2, [r3, #0]
					break;
  400e90:	e003      	b.n	400e9a <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400e92:	4b2c      	ldr	r3, [pc, #176]	; (400f44 <SystemCoreClockUpdate+0x184>)
  400e94:	4a2c      	ldr	r2, [pc, #176]	; (400f48 <SystemCoreClockUpdate+0x188>)
  400e96:	601a      	str	r2, [r3, #0]
					break;
  400e98:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400e9a:	4b28      	ldr	r3, [pc, #160]	; (400f3c <SystemCoreClockUpdate+0x17c>)
  400e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e9e:	f003 0303 	and.w	r3, r3, #3
  400ea2:	2b02      	cmp	r3, #2
  400ea4:	d115      	bne.n	400ed2 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400ea6:	4b25      	ldr	r3, [pc, #148]	; (400f3c <SystemCoreClockUpdate+0x17c>)
  400ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  400eaa:	0c1b      	lsrs	r3, r3, #16
  400eac:	f3c3 030a 	ubfx	r3, r3, #0, #11
  400eb0:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400eb2:	4a24      	ldr	r2, [pc, #144]	; (400f44 <SystemCoreClockUpdate+0x184>)
  400eb4:	6812      	ldr	r2, [r2, #0]
  400eb6:	fb02 f303 	mul.w	r3, r2, r3
  400eba:	4a22      	ldr	r2, [pc, #136]	; (400f44 <SystemCoreClockUpdate+0x184>)
  400ebc:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400ebe:	4b1f      	ldr	r3, [pc, #124]	; (400f3c <SystemCoreClockUpdate+0x17c>)
  400ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  400ec2:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400ec4:	4a1f      	ldr	r2, [pc, #124]	; (400f44 <SystemCoreClockUpdate+0x184>)
  400ec6:	6812      	ldr	r2, [r2, #0]
  400ec8:	fbb2 f3f3 	udiv	r3, r2, r3
  400ecc:	4a1d      	ldr	r2, [pc, #116]	; (400f44 <SystemCoreClockUpdate+0x184>)
  400ece:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  400ed0:	e016      	b.n	400f00 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400ed2:	4b1a      	ldr	r3, [pc, #104]	; (400f3c <SystemCoreClockUpdate+0x17c>)
  400ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  400ed6:	0c1b      	lsrs	r3, r3, #16
  400ed8:	f3c3 030a 	ubfx	r3, r3, #0, #11
  400edc:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400ede:	4a19      	ldr	r2, [pc, #100]	; (400f44 <SystemCoreClockUpdate+0x184>)
  400ee0:	6812      	ldr	r2, [r2, #0]
  400ee2:	fb02 f303 	mul.w	r3, r2, r3
  400ee6:	4a17      	ldr	r2, [pc, #92]	; (400f44 <SystemCoreClockUpdate+0x184>)
  400ee8:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400eea:	4b14      	ldr	r3, [pc, #80]	; (400f3c <SystemCoreClockUpdate+0x17c>)
  400eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  400eee:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400ef0:	4a14      	ldr	r2, [pc, #80]	; (400f44 <SystemCoreClockUpdate+0x184>)
  400ef2:	6812      	ldr	r2, [r2, #0]
  400ef4:	fbb2 f3f3 	udiv	r3, r2, r3
  400ef8:	4a12      	ldr	r2, [pc, #72]	; (400f44 <SystemCoreClockUpdate+0x184>)
  400efa:	6013      	str	r3, [r2, #0]
		break;
  400efc:	e000      	b.n	400f00 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  400efe:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400f00:	4b0e      	ldr	r3, [pc, #56]	; (400f3c <SystemCoreClockUpdate+0x17c>)
  400f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f04:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f08:	2b70      	cmp	r3, #112	; 0x70
  400f0a:	d108      	bne.n	400f1e <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  400f0c:	4b0d      	ldr	r3, [pc, #52]	; (400f44 <SystemCoreClockUpdate+0x184>)
  400f0e:	681b      	ldr	r3, [r3, #0]
  400f10:	4a10      	ldr	r2, [pc, #64]	; (400f54 <SystemCoreClockUpdate+0x194>)
  400f12:	fba2 2303 	umull	r2, r3, r2, r3
  400f16:	085b      	lsrs	r3, r3, #1
  400f18:	4a0a      	ldr	r2, [pc, #40]	; (400f44 <SystemCoreClockUpdate+0x184>)
  400f1a:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  400f1c:	e00a      	b.n	400f34 <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400f1e:	4b07      	ldr	r3, [pc, #28]	; (400f3c <SystemCoreClockUpdate+0x17c>)
  400f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f22:	091b      	lsrs	r3, r3, #4
  400f24:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  400f28:	4a06      	ldr	r2, [pc, #24]	; (400f44 <SystemCoreClockUpdate+0x184>)
  400f2a:	6812      	ldr	r2, [r2, #0]
  400f2c:	fa22 f303 	lsr.w	r3, r2, r3
  400f30:	4a04      	ldr	r2, [pc, #16]	; (400f44 <SystemCoreClockUpdate+0x184>)
  400f32:	6013      	str	r3, [r2, #0]
}
  400f34:	bf00      	nop
  400f36:	46bd      	mov	sp, r7
  400f38:	bc80      	pop	{r7}
  400f3a:	4770      	bx	lr
  400f3c:	400e0400 	.word	0x400e0400
  400f40:	400e1410 	.word	0x400e1410
  400f44:	20000010 	.word	0x20000010
  400f48:	00b71b00 	.word	0x00b71b00
  400f4c:	003d0900 	.word	0x003d0900
  400f50:	007a1200 	.word	0x007a1200
  400f54:	aaaaaaab 	.word	0xaaaaaaab

00400f58 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  400f58:	b480      	push	{r7}
  400f5a:	b083      	sub	sp, #12
  400f5c:	af00      	add	r7, sp, #0
  400f5e:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400f60:	687b      	ldr	r3, [r7, #4]
  400f62:	4a18      	ldr	r2, [pc, #96]	; (400fc4 <system_init_flash+0x6c>)
  400f64:	4293      	cmp	r3, r2
  400f66:	d804      	bhi.n	400f72 <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400f68:	4b17      	ldr	r3, [pc, #92]	; (400fc8 <system_init_flash+0x70>)
  400f6a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400f6e:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  400f70:	e023      	b.n	400fba <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400f72:	687b      	ldr	r3, [r7, #4]
  400f74:	4a15      	ldr	r2, [pc, #84]	; (400fcc <system_init_flash+0x74>)
  400f76:	4293      	cmp	r3, r2
  400f78:	d803      	bhi.n	400f82 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400f7a:	4b13      	ldr	r3, [pc, #76]	; (400fc8 <system_init_flash+0x70>)
  400f7c:	4a14      	ldr	r2, [pc, #80]	; (400fd0 <system_init_flash+0x78>)
  400f7e:	601a      	str	r2, [r3, #0]
}
  400f80:	e01b      	b.n	400fba <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400f82:	687b      	ldr	r3, [r7, #4]
  400f84:	4a13      	ldr	r2, [pc, #76]	; (400fd4 <system_init_flash+0x7c>)
  400f86:	4293      	cmp	r3, r2
  400f88:	d803      	bhi.n	400f92 <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400f8a:	4b0f      	ldr	r3, [pc, #60]	; (400fc8 <system_init_flash+0x70>)
  400f8c:	4a12      	ldr	r2, [pc, #72]	; (400fd8 <system_init_flash+0x80>)
  400f8e:	601a      	str	r2, [r3, #0]
}
  400f90:	e013      	b.n	400fba <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400f92:	687b      	ldr	r3, [r7, #4]
  400f94:	4a11      	ldr	r2, [pc, #68]	; (400fdc <system_init_flash+0x84>)
  400f96:	4293      	cmp	r3, r2
  400f98:	d803      	bhi.n	400fa2 <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400f9a:	4b0b      	ldr	r3, [pc, #44]	; (400fc8 <system_init_flash+0x70>)
  400f9c:	4a10      	ldr	r2, [pc, #64]	; (400fe0 <system_init_flash+0x88>)
  400f9e:	601a      	str	r2, [r3, #0]
}
  400fa0:	e00b      	b.n	400fba <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400fa2:	687b      	ldr	r3, [r7, #4]
  400fa4:	4a0f      	ldr	r2, [pc, #60]	; (400fe4 <system_init_flash+0x8c>)
  400fa6:	4293      	cmp	r3, r2
  400fa8:	d804      	bhi.n	400fb4 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400faa:	4b07      	ldr	r3, [pc, #28]	; (400fc8 <system_init_flash+0x70>)
  400fac:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400fb0:	601a      	str	r2, [r3, #0]
}
  400fb2:	e002      	b.n	400fba <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400fb4:	4b04      	ldr	r3, [pc, #16]	; (400fc8 <system_init_flash+0x70>)
  400fb6:	4a0c      	ldr	r2, [pc, #48]	; (400fe8 <system_init_flash+0x90>)
  400fb8:	601a      	str	r2, [r3, #0]
}
  400fba:	bf00      	nop
  400fbc:	370c      	adds	r7, #12
  400fbe:	46bd      	mov	sp, r7
  400fc0:	bc80      	pop	{r7}
  400fc2:	4770      	bx	lr
  400fc4:	01312cff 	.word	0x01312cff
  400fc8:	400e0a00 	.word	0x400e0a00
  400fcc:	026259ff 	.word	0x026259ff
  400fd0:	04000100 	.word	0x04000100
  400fd4:	039386ff 	.word	0x039386ff
  400fd8:	04000200 	.word	0x04000200
  400fdc:	04c4b3ff 	.word	0x04c4b3ff
  400fe0:	04000300 	.word	0x04000300
  400fe4:	05f5e0ff 	.word	0x05f5e0ff
  400fe8:	04000500 	.word	0x04000500

00400fec <osc_get_rate>:
{
  400fec:	b480      	push	{r7}
  400fee:	b083      	sub	sp, #12
  400ff0:	af00      	add	r7, sp, #0
  400ff2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400ff4:	687b      	ldr	r3, [r7, #4]
  400ff6:	2b07      	cmp	r3, #7
  400ff8:	d825      	bhi.n	401046 <osc_get_rate+0x5a>
  400ffa:	a201      	add	r2, pc, #4	; (adr r2, 401000 <osc_get_rate+0x14>)
  400ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401000:	00401021 	.word	0x00401021
  401004:	00401027 	.word	0x00401027
  401008:	0040102d 	.word	0x0040102d
  40100c:	00401033 	.word	0x00401033
  401010:	00401037 	.word	0x00401037
  401014:	0040103b 	.word	0x0040103b
  401018:	0040103f 	.word	0x0040103f
  40101c:	00401043 	.word	0x00401043
		return OSC_SLCK_32K_RC_HZ;
  401020:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401024:	e010      	b.n	401048 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40102a:	e00d      	b.n	401048 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  40102c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401030:	e00a      	b.n	401048 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401032:	4b08      	ldr	r3, [pc, #32]	; (401054 <osc_get_rate+0x68>)
  401034:	e008      	b.n	401048 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401036:	4b08      	ldr	r3, [pc, #32]	; (401058 <osc_get_rate+0x6c>)
  401038:	e006      	b.n	401048 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40103a:	4b08      	ldr	r3, [pc, #32]	; (40105c <osc_get_rate+0x70>)
  40103c:	e004      	b.n	401048 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40103e:	4b07      	ldr	r3, [pc, #28]	; (40105c <osc_get_rate+0x70>)
  401040:	e002      	b.n	401048 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401042:	4b06      	ldr	r3, [pc, #24]	; (40105c <osc_get_rate+0x70>)
  401044:	e000      	b.n	401048 <osc_get_rate+0x5c>
	return 0;
  401046:	2300      	movs	r3, #0
}
  401048:	4618      	mov	r0, r3
  40104a:	370c      	adds	r7, #12
  40104c:	46bd      	mov	sp, r7
  40104e:	bc80      	pop	{r7}
  401050:	4770      	bx	lr
  401052:	bf00      	nop
  401054:	003d0900 	.word	0x003d0900
  401058:	007a1200 	.word	0x007a1200
  40105c:	00b71b00 	.word	0x00b71b00

00401060 <sysclk_get_main_hz>:
{
  401060:	b580      	push	{r7, lr}
  401062:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401064:	2006      	movs	r0, #6
  401066:	4b04      	ldr	r3, [pc, #16]	; (401078 <sysclk_get_main_hz+0x18>)
  401068:	4798      	blx	r3
  40106a:	4602      	mov	r2, r0
  40106c:	4613      	mov	r3, r2
  40106e:	009b      	lsls	r3, r3, #2
  401070:	4413      	add	r3, r2
  401072:	009b      	lsls	r3, r3, #2
}
  401074:	4618      	mov	r0, r3
  401076:	bd80      	pop	{r7, pc}
  401078:	00400fed 	.word	0x00400fed

0040107c <sysclk_get_cpu_hz>:
{
  40107c:	b580      	push	{r7, lr}
  40107e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401080:	4b02      	ldr	r3, [pc, #8]	; (40108c <sysclk_get_cpu_hz+0x10>)
  401082:	4798      	blx	r3
  401084:	4603      	mov	r3, r0
  401086:	085b      	lsrs	r3, r3, #1
}
  401088:	4618      	mov	r0, r3
  40108a:	bd80      	pop	{r7, pc}
  40108c:	00401061 	.word	0x00401061

00401090 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  401090:	b480      	push	{r7}
  401092:	b08b      	sub	sp, #44	; 0x2c
  401094:	af00      	add	r7, sp, #0
  401096:	6078      	str	r0, [r7, #4]
  401098:	460b      	mov	r3, r1
  40109a:	70fb      	strb	r3, [r7, #3]
  40109c:	687b      	ldr	r3, [r7, #4]
  40109e:	627b      	str	r3, [r7, #36]	; 0x24
  4010a0:	78fb      	ldrb	r3, [r7, #3]
  4010a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  4010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4010a8:	61fb      	str	r3, [r7, #28]
  4010aa:	69fb      	ldr	r3, [r7, #28]
  4010ac:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4010ae:	69bb      	ldr	r3, [r7, #24]
  4010b0:	095b      	lsrs	r3, r3, #5
  4010b2:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4010b4:	697b      	ldr	r3, [r7, #20]
  4010b6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4010ba:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4010be:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4010c0:	613b      	str	r3, [r7, #16]

	if (level) {
  4010c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4010c6:	2b00      	cmp	r3, #0
  4010c8:	d009      	beq.n	4010de <ioport_set_pin_level+0x4e>
  4010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4010cc:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4010ce:	68fb      	ldr	r3, [r7, #12]
  4010d0:	f003 031f 	and.w	r3, r3, #31
  4010d4:	2201      	movs	r2, #1
  4010d6:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4010d8:	693b      	ldr	r3, [r7, #16]
  4010da:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  4010dc:	e008      	b.n	4010f0 <ioport_set_pin_level+0x60>
  4010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4010e0:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  4010e2:	68bb      	ldr	r3, [r7, #8]
  4010e4:	f003 031f 	and.w	r3, r3, #31
  4010e8:	2201      	movs	r2, #1
  4010ea:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4010ec:	693b      	ldr	r3, [r7, #16]
  4010ee:	635a      	str	r2, [r3, #52]	; 0x34
  4010f0:	bf00      	nop
  4010f2:	372c      	adds	r7, #44	; 0x2c
  4010f4:	46bd      	mov	sp, r7
  4010f6:	bc80      	pop	{r7}
  4010f8:	4770      	bx	lr
	...

004010fc <main>:

#include <asf.h>
#include "button.h"

int main (void)
{
  4010fc:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  401100:	af00      	add	r7, sp, #0
	sysclk_init();
  401102:	4b3e      	ldr	r3, [pc, #248]	; (4011fc <main+0x100>)
  401104:	4798      	blx	r3
	board_init();
  401106:	4b3e      	ldr	r3, [pc, #248]	; (401200 <main+0x104>)
  401108:	4798      	blx	r3
	configure_button();
  40110a:	4b3e      	ldr	r3, [pc, #248]	; (401204 <main+0x108>)
  40110c:	4798      	blx	r3
	//ioport_set_pin_level(LED_PIN, true);
	while(1) {

		if (button_flag && !button_status) {
  40110e:	4b3e      	ldr	r3, [pc, #248]	; (401208 <main+0x10c>)
  401110:	681b      	ldr	r3, [r3, #0]
  401112:	2b00      	cmp	r3, #0
  401114:	d035      	beq.n	401182 <main+0x86>
  401116:	4b3d      	ldr	r3, [pc, #244]	; (40120c <main+0x110>)
  401118:	681b      	ldr	r3, [r3, #0]
  40111a:	2b00      	cmp	r3, #0
  40111c:	d131      	bne.n	401182 <main+0x86>
			ioport_set_pin_level(LED_PIN, true);
  40111e:	2101      	movs	r1, #1
  401120:	2017      	movs	r0, #23
  401122:	4b3b      	ldr	r3, [pc, #236]	; (401210 <main+0x114>)
  401124:	4798      	blx	r3
			delay_ms(10);
  401126:	4b3b      	ldr	r3, [pc, #236]	; (401214 <main+0x118>)
  401128:	4798      	blx	r3
  40112a:	4603      	mov	r3, r0
  40112c:	4619      	mov	r1, r3
  40112e:	f04f 0200 	mov.w	r2, #0
  401132:	460b      	mov	r3, r1
  401134:	4614      	mov	r4, r2
  401136:	00a6      	lsls	r6, r4, #2
  401138:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  40113c:	009d      	lsls	r5, r3, #2
  40113e:	462b      	mov	r3, r5
  401140:	4634      	mov	r4, r6
  401142:	185b      	adds	r3, r3, r1
  401144:	eb44 0402 	adc.w	r4, r4, r2
  401148:	18db      	adds	r3, r3, r3
  40114a:	eb44 0404 	adc.w	r4, r4, r4
  40114e:	4619      	mov	r1, r3
  401150:	4622      	mov	r2, r4
  401152:	f243 63af 	movw	r3, #13999	; 0x36af
  401156:	f04f 0400 	mov.w	r4, #0
  40115a:	eb11 0b03 	adds.w	fp, r1, r3
  40115e:	eb42 0c04 	adc.w	ip, r2, r4
  401162:	4658      	mov	r0, fp
  401164:	4661      	mov	r1, ip
  401166:	4c2c      	ldr	r4, [pc, #176]	; (401218 <main+0x11c>)
  401168:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40116c:	f04f 0300 	mov.w	r3, #0
  401170:	47a0      	blx	r4
  401172:	4603      	mov	r3, r0
  401174:	460c      	mov	r4, r1
  401176:	4618      	mov	r0, r3
  401178:	4b28      	ldr	r3, [pc, #160]	; (40121c <main+0x120>)
  40117a:	4798      	blx	r3
			button_flag = false;
  40117c:	4b22      	ldr	r3, [pc, #136]	; (401208 <main+0x10c>)
  40117e:	2200      	movs	r2, #0
  401180:	601a      	str	r2, [r3, #0]
		} 
		if (button_flag && button_status) {
  401182:	4b21      	ldr	r3, [pc, #132]	; (401208 <main+0x10c>)
  401184:	681b      	ldr	r3, [r3, #0]
  401186:	2b00      	cmp	r3, #0
  401188:	d0c1      	beq.n	40110e <main+0x12>
  40118a:	4b20      	ldr	r3, [pc, #128]	; (40120c <main+0x110>)
  40118c:	681b      	ldr	r3, [r3, #0]
  40118e:	2b00      	cmp	r3, #0
  401190:	d0bd      	beq.n	40110e <main+0x12>
			ioport_set_pin_level(LED_PIN, false);
  401192:	2100      	movs	r1, #0
  401194:	2017      	movs	r0, #23
  401196:	4b1e      	ldr	r3, [pc, #120]	; (401210 <main+0x114>)
  401198:	4798      	blx	r3
			delay_ms(10);
  40119a:	4b1e      	ldr	r3, [pc, #120]	; (401214 <main+0x118>)
  40119c:	4798      	blx	r3
  40119e:	4603      	mov	r3, r0
  4011a0:	4619      	mov	r1, r3
  4011a2:	f04f 0200 	mov.w	r2, #0
  4011a6:	460b      	mov	r3, r1
  4011a8:	4614      	mov	r4, r2
  4011aa:	ea4f 0984 	mov.w	r9, r4, lsl #2
  4011ae:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  4011b2:	ea4f 0883 	mov.w	r8, r3, lsl #2
  4011b6:	4643      	mov	r3, r8
  4011b8:	464c      	mov	r4, r9
  4011ba:	185b      	adds	r3, r3, r1
  4011bc:	eb44 0402 	adc.w	r4, r4, r2
  4011c0:	18db      	adds	r3, r3, r3
  4011c2:	eb44 0404 	adc.w	r4, r4, r4
  4011c6:	4619      	mov	r1, r3
  4011c8:	4622      	mov	r2, r4
  4011ca:	f243 63af 	movw	r3, #13999	; 0x36af
  4011ce:	f04f 0400 	mov.w	r4, #0
  4011d2:	eb11 0b03 	adds.w	fp, r1, r3
  4011d6:	eb42 0c04 	adc.w	ip, r2, r4
  4011da:	4658      	mov	r0, fp
  4011dc:	4661      	mov	r1, ip
  4011de:	4c0e      	ldr	r4, [pc, #56]	; (401218 <main+0x11c>)
  4011e0:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4011e4:	f04f 0300 	mov.w	r3, #0
  4011e8:	47a0      	blx	r4
  4011ea:	4603      	mov	r3, r0
  4011ec:	460c      	mov	r4, r1
  4011ee:	4618      	mov	r0, r3
  4011f0:	4b0a      	ldr	r3, [pc, #40]	; (40121c <main+0x120>)
  4011f2:	4798      	blx	r3
			button_flag = false;
  4011f4:	4b04      	ldr	r3, [pc, #16]	; (401208 <main+0x10c>)
  4011f6:	2200      	movs	r2, #0
  4011f8:	601a      	str	r2, [r3, #0]
		if (button_flag && !button_status) {
  4011fa:	e788      	b.n	40110e <main+0x12>
  4011fc:	004006c9 	.word	0x004006c9
  401200:	00400cc1 	.word	0x00400cc1
  401204:	00400381 	.word	0x00400381
  401208:	200004d8 	.word	0x200004d8
  40120c:	2000000c 	.word	0x2000000c
  401210:	00401091 	.word	0x00401091
  401214:	0040107d 	.word	0x0040107d
  401218:	00401221 	.word	0x00401221
  40121c:	20000001 	.word	0x20000001

00401220 <__aeabi_uldivmod>:
  401220:	b953      	cbnz	r3, 401238 <__aeabi_uldivmod+0x18>
  401222:	b94a      	cbnz	r2, 401238 <__aeabi_uldivmod+0x18>
  401224:	2900      	cmp	r1, #0
  401226:	bf08      	it	eq
  401228:	2800      	cmpeq	r0, #0
  40122a:	bf1c      	itt	ne
  40122c:	f04f 31ff 	movne.w	r1, #4294967295
  401230:	f04f 30ff 	movne.w	r0, #4294967295
  401234:	f000 b97a 	b.w	40152c <__aeabi_idiv0>
  401238:	f1ad 0c08 	sub.w	ip, sp, #8
  40123c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  401240:	f000 f806 	bl	401250 <__udivmoddi4>
  401244:	f8dd e004 	ldr.w	lr, [sp, #4]
  401248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40124c:	b004      	add	sp, #16
  40124e:	4770      	bx	lr

00401250 <__udivmoddi4>:
  401250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401254:	468c      	mov	ip, r1
  401256:	460d      	mov	r5, r1
  401258:	4604      	mov	r4, r0
  40125a:	9e08      	ldr	r6, [sp, #32]
  40125c:	2b00      	cmp	r3, #0
  40125e:	d151      	bne.n	401304 <__udivmoddi4+0xb4>
  401260:	428a      	cmp	r2, r1
  401262:	4617      	mov	r7, r2
  401264:	d96d      	bls.n	401342 <__udivmoddi4+0xf2>
  401266:	fab2 fe82 	clz	lr, r2
  40126a:	f1be 0f00 	cmp.w	lr, #0
  40126e:	d00b      	beq.n	401288 <__udivmoddi4+0x38>
  401270:	f1ce 0c20 	rsb	ip, lr, #32
  401274:	fa01 f50e 	lsl.w	r5, r1, lr
  401278:	fa20 fc0c 	lsr.w	ip, r0, ip
  40127c:	fa02 f70e 	lsl.w	r7, r2, lr
  401280:	ea4c 0c05 	orr.w	ip, ip, r5
  401284:	fa00 f40e 	lsl.w	r4, r0, lr
  401288:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40128c:	0c25      	lsrs	r5, r4, #16
  40128e:	fbbc f8fa 	udiv	r8, ip, sl
  401292:	fa1f f987 	uxth.w	r9, r7
  401296:	fb0a cc18 	mls	ip, sl, r8, ip
  40129a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40129e:	fb08 f309 	mul.w	r3, r8, r9
  4012a2:	42ab      	cmp	r3, r5
  4012a4:	d90a      	bls.n	4012bc <__udivmoddi4+0x6c>
  4012a6:	19ed      	adds	r5, r5, r7
  4012a8:	f108 32ff 	add.w	r2, r8, #4294967295
  4012ac:	f080 8123 	bcs.w	4014f6 <__udivmoddi4+0x2a6>
  4012b0:	42ab      	cmp	r3, r5
  4012b2:	f240 8120 	bls.w	4014f6 <__udivmoddi4+0x2a6>
  4012b6:	f1a8 0802 	sub.w	r8, r8, #2
  4012ba:	443d      	add	r5, r7
  4012bc:	1aed      	subs	r5, r5, r3
  4012be:	b2a4      	uxth	r4, r4
  4012c0:	fbb5 f0fa 	udiv	r0, r5, sl
  4012c4:	fb0a 5510 	mls	r5, sl, r0, r5
  4012c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4012cc:	fb00 f909 	mul.w	r9, r0, r9
  4012d0:	45a1      	cmp	r9, r4
  4012d2:	d909      	bls.n	4012e8 <__udivmoddi4+0x98>
  4012d4:	19e4      	adds	r4, r4, r7
  4012d6:	f100 33ff 	add.w	r3, r0, #4294967295
  4012da:	f080 810a 	bcs.w	4014f2 <__udivmoddi4+0x2a2>
  4012de:	45a1      	cmp	r9, r4
  4012e0:	f240 8107 	bls.w	4014f2 <__udivmoddi4+0x2a2>
  4012e4:	3802      	subs	r0, #2
  4012e6:	443c      	add	r4, r7
  4012e8:	eba4 0409 	sub.w	r4, r4, r9
  4012ec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4012f0:	2100      	movs	r1, #0
  4012f2:	2e00      	cmp	r6, #0
  4012f4:	d061      	beq.n	4013ba <__udivmoddi4+0x16a>
  4012f6:	fa24 f40e 	lsr.w	r4, r4, lr
  4012fa:	2300      	movs	r3, #0
  4012fc:	6034      	str	r4, [r6, #0]
  4012fe:	6073      	str	r3, [r6, #4]
  401300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401304:	428b      	cmp	r3, r1
  401306:	d907      	bls.n	401318 <__udivmoddi4+0xc8>
  401308:	2e00      	cmp	r6, #0
  40130a:	d054      	beq.n	4013b6 <__udivmoddi4+0x166>
  40130c:	2100      	movs	r1, #0
  40130e:	e886 0021 	stmia.w	r6, {r0, r5}
  401312:	4608      	mov	r0, r1
  401314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401318:	fab3 f183 	clz	r1, r3
  40131c:	2900      	cmp	r1, #0
  40131e:	f040 808e 	bne.w	40143e <__udivmoddi4+0x1ee>
  401322:	42ab      	cmp	r3, r5
  401324:	d302      	bcc.n	40132c <__udivmoddi4+0xdc>
  401326:	4282      	cmp	r2, r0
  401328:	f200 80fa 	bhi.w	401520 <__udivmoddi4+0x2d0>
  40132c:	1a84      	subs	r4, r0, r2
  40132e:	eb65 0503 	sbc.w	r5, r5, r3
  401332:	2001      	movs	r0, #1
  401334:	46ac      	mov	ip, r5
  401336:	2e00      	cmp	r6, #0
  401338:	d03f      	beq.n	4013ba <__udivmoddi4+0x16a>
  40133a:	e886 1010 	stmia.w	r6, {r4, ip}
  40133e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401342:	b912      	cbnz	r2, 40134a <__udivmoddi4+0xfa>
  401344:	2701      	movs	r7, #1
  401346:	fbb7 f7f2 	udiv	r7, r7, r2
  40134a:	fab7 fe87 	clz	lr, r7
  40134e:	f1be 0f00 	cmp.w	lr, #0
  401352:	d134      	bne.n	4013be <__udivmoddi4+0x16e>
  401354:	1beb      	subs	r3, r5, r7
  401356:	0c3a      	lsrs	r2, r7, #16
  401358:	fa1f fc87 	uxth.w	ip, r7
  40135c:	2101      	movs	r1, #1
  40135e:	fbb3 f8f2 	udiv	r8, r3, r2
  401362:	0c25      	lsrs	r5, r4, #16
  401364:	fb02 3318 	mls	r3, r2, r8, r3
  401368:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40136c:	fb0c f308 	mul.w	r3, ip, r8
  401370:	42ab      	cmp	r3, r5
  401372:	d907      	bls.n	401384 <__udivmoddi4+0x134>
  401374:	19ed      	adds	r5, r5, r7
  401376:	f108 30ff 	add.w	r0, r8, #4294967295
  40137a:	d202      	bcs.n	401382 <__udivmoddi4+0x132>
  40137c:	42ab      	cmp	r3, r5
  40137e:	f200 80d1 	bhi.w	401524 <__udivmoddi4+0x2d4>
  401382:	4680      	mov	r8, r0
  401384:	1aed      	subs	r5, r5, r3
  401386:	b2a3      	uxth	r3, r4
  401388:	fbb5 f0f2 	udiv	r0, r5, r2
  40138c:	fb02 5510 	mls	r5, r2, r0, r5
  401390:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  401394:	fb0c fc00 	mul.w	ip, ip, r0
  401398:	45a4      	cmp	ip, r4
  40139a:	d907      	bls.n	4013ac <__udivmoddi4+0x15c>
  40139c:	19e4      	adds	r4, r4, r7
  40139e:	f100 33ff 	add.w	r3, r0, #4294967295
  4013a2:	d202      	bcs.n	4013aa <__udivmoddi4+0x15a>
  4013a4:	45a4      	cmp	ip, r4
  4013a6:	f200 80b8 	bhi.w	40151a <__udivmoddi4+0x2ca>
  4013aa:	4618      	mov	r0, r3
  4013ac:	eba4 040c 	sub.w	r4, r4, ip
  4013b0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4013b4:	e79d      	b.n	4012f2 <__udivmoddi4+0xa2>
  4013b6:	4631      	mov	r1, r6
  4013b8:	4630      	mov	r0, r6
  4013ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4013be:	f1ce 0420 	rsb	r4, lr, #32
  4013c2:	fa05 f30e 	lsl.w	r3, r5, lr
  4013c6:	fa07 f70e 	lsl.w	r7, r7, lr
  4013ca:	fa20 f804 	lsr.w	r8, r0, r4
  4013ce:	0c3a      	lsrs	r2, r7, #16
  4013d0:	fa25 f404 	lsr.w	r4, r5, r4
  4013d4:	ea48 0803 	orr.w	r8, r8, r3
  4013d8:	fbb4 f1f2 	udiv	r1, r4, r2
  4013dc:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4013e0:	fb02 4411 	mls	r4, r2, r1, r4
  4013e4:	fa1f fc87 	uxth.w	ip, r7
  4013e8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4013ec:	fb01 f30c 	mul.w	r3, r1, ip
  4013f0:	42ab      	cmp	r3, r5
  4013f2:	fa00 f40e 	lsl.w	r4, r0, lr
  4013f6:	d909      	bls.n	40140c <__udivmoddi4+0x1bc>
  4013f8:	19ed      	adds	r5, r5, r7
  4013fa:	f101 30ff 	add.w	r0, r1, #4294967295
  4013fe:	f080 808a 	bcs.w	401516 <__udivmoddi4+0x2c6>
  401402:	42ab      	cmp	r3, r5
  401404:	f240 8087 	bls.w	401516 <__udivmoddi4+0x2c6>
  401408:	3902      	subs	r1, #2
  40140a:	443d      	add	r5, r7
  40140c:	1aeb      	subs	r3, r5, r3
  40140e:	fa1f f588 	uxth.w	r5, r8
  401412:	fbb3 f0f2 	udiv	r0, r3, r2
  401416:	fb02 3310 	mls	r3, r2, r0, r3
  40141a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40141e:	fb00 f30c 	mul.w	r3, r0, ip
  401422:	42ab      	cmp	r3, r5
  401424:	d907      	bls.n	401436 <__udivmoddi4+0x1e6>
  401426:	19ed      	adds	r5, r5, r7
  401428:	f100 38ff 	add.w	r8, r0, #4294967295
  40142c:	d26f      	bcs.n	40150e <__udivmoddi4+0x2be>
  40142e:	42ab      	cmp	r3, r5
  401430:	d96d      	bls.n	40150e <__udivmoddi4+0x2be>
  401432:	3802      	subs	r0, #2
  401434:	443d      	add	r5, r7
  401436:	1aeb      	subs	r3, r5, r3
  401438:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40143c:	e78f      	b.n	40135e <__udivmoddi4+0x10e>
  40143e:	f1c1 0720 	rsb	r7, r1, #32
  401442:	fa22 f807 	lsr.w	r8, r2, r7
  401446:	408b      	lsls	r3, r1
  401448:	fa05 f401 	lsl.w	r4, r5, r1
  40144c:	ea48 0303 	orr.w	r3, r8, r3
  401450:	fa20 fe07 	lsr.w	lr, r0, r7
  401454:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  401458:	40fd      	lsrs	r5, r7
  40145a:	ea4e 0e04 	orr.w	lr, lr, r4
  40145e:	fbb5 f9fc 	udiv	r9, r5, ip
  401462:	ea4f 441e 	mov.w	r4, lr, lsr #16
  401466:	fb0c 5519 	mls	r5, ip, r9, r5
  40146a:	fa1f f883 	uxth.w	r8, r3
  40146e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  401472:	fb09 f408 	mul.w	r4, r9, r8
  401476:	42ac      	cmp	r4, r5
  401478:	fa02 f201 	lsl.w	r2, r2, r1
  40147c:	fa00 fa01 	lsl.w	sl, r0, r1
  401480:	d908      	bls.n	401494 <__udivmoddi4+0x244>
  401482:	18ed      	adds	r5, r5, r3
  401484:	f109 30ff 	add.w	r0, r9, #4294967295
  401488:	d243      	bcs.n	401512 <__udivmoddi4+0x2c2>
  40148a:	42ac      	cmp	r4, r5
  40148c:	d941      	bls.n	401512 <__udivmoddi4+0x2c2>
  40148e:	f1a9 0902 	sub.w	r9, r9, #2
  401492:	441d      	add	r5, r3
  401494:	1b2d      	subs	r5, r5, r4
  401496:	fa1f fe8e 	uxth.w	lr, lr
  40149a:	fbb5 f0fc 	udiv	r0, r5, ip
  40149e:	fb0c 5510 	mls	r5, ip, r0, r5
  4014a2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4014a6:	fb00 f808 	mul.w	r8, r0, r8
  4014aa:	45a0      	cmp	r8, r4
  4014ac:	d907      	bls.n	4014be <__udivmoddi4+0x26e>
  4014ae:	18e4      	adds	r4, r4, r3
  4014b0:	f100 35ff 	add.w	r5, r0, #4294967295
  4014b4:	d229      	bcs.n	40150a <__udivmoddi4+0x2ba>
  4014b6:	45a0      	cmp	r8, r4
  4014b8:	d927      	bls.n	40150a <__udivmoddi4+0x2ba>
  4014ba:	3802      	subs	r0, #2
  4014bc:	441c      	add	r4, r3
  4014be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4014c2:	eba4 0408 	sub.w	r4, r4, r8
  4014c6:	fba0 8902 	umull	r8, r9, r0, r2
  4014ca:	454c      	cmp	r4, r9
  4014cc:	46c6      	mov	lr, r8
  4014ce:	464d      	mov	r5, r9
  4014d0:	d315      	bcc.n	4014fe <__udivmoddi4+0x2ae>
  4014d2:	d012      	beq.n	4014fa <__udivmoddi4+0x2aa>
  4014d4:	b156      	cbz	r6, 4014ec <__udivmoddi4+0x29c>
  4014d6:	ebba 030e 	subs.w	r3, sl, lr
  4014da:	eb64 0405 	sbc.w	r4, r4, r5
  4014de:	fa04 f707 	lsl.w	r7, r4, r7
  4014e2:	40cb      	lsrs	r3, r1
  4014e4:	431f      	orrs	r7, r3
  4014e6:	40cc      	lsrs	r4, r1
  4014e8:	6037      	str	r7, [r6, #0]
  4014ea:	6074      	str	r4, [r6, #4]
  4014ec:	2100      	movs	r1, #0
  4014ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4014f2:	4618      	mov	r0, r3
  4014f4:	e6f8      	b.n	4012e8 <__udivmoddi4+0x98>
  4014f6:	4690      	mov	r8, r2
  4014f8:	e6e0      	b.n	4012bc <__udivmoddi4+0x6c>
  4014fa:	45c2      	cmp	sl, r8
  4014fc:	d2ea      	bcs.n	4014d4 <__udivmoddi4+0x284>
  4014fe:	ebb8 0e02 	subs.w	lr, r8, r2
  401502:	eb69 0503 	sbc.w	r5, r9, r3
  401506:	3801      	subs	r0, #1
  401508:	e7e4      	b.n	4014d4 <__udivmoddi4+0x284>
  40150a:	4628      	mov	r0, r5
  40150c:	e7d7      	b.n	4014be <__udivmoddi4+0x26e>
  40150e:	4640      	mov	r0, r8
  401510:	e791      	b.n	401436 <__udivmoddi4+0x1e6>
  401512:	4681      	mov	r9, r0
  401514:	e7be      	b.n	401494 <__udivmoddi4+0x244>
  401516:	4601      	mov	r1, r0
  401518:	e778      	b.n	40140c <__udivmoddi4+0x1bc>
  40151a:	3802      	subs	r0, #2
  40151c:	443c      	add	r4, r7
  40151e:	e745      	b.n	4013ac <__udivmoddi4+0x15c>
  401520:	4608      	mov	r0, r1
  401522:	e708      	b.n	401336 <__udivmoddi4+0xe6>
  401524:	f1a8 0802 	sub.w	r8, r8, #2
  401528:	443d      	add	r5, r7
  40152a:	e72b      	b.n	401384 <__udivmoddi4+0x134>

0040152c <__aeabi_idiv0>:
  40152c:	4770      	bx	lr
  40152e:	bf00      	nop

00401530 <__libc_init_array>:
  401530:	b570      	push	{r4, r5, r6, lr}
  401532:	4e0f      	ldr	r6, [pc, #60]	; (401570 <__libc_init_array+0x40>)
  401534:	4d0f      	ldr	r5, [pc, #60]	; (401574 <__libc_init_array+0x44>)
  401536:	1b76      	subs	r6, r6, r5
  401538:	10b6      	asrs	r6, r6, #2
  40153a:	bf18      	it	ne
  40153c:	2400      	movne	r4, #0
  40153e:	d005      	beq.n	40154c <__libc_init_array+0x1c>
  401540:	3401      	adds	r4, #1
  401542:	f855 3b04 	ldr.w	r3, [r5], #4
  401546:	4798      	blx	r3
  401548:	42a6      	cmp	r6, r4
  40154a:	d1f9      	bne.n	401540 <__libc_init_array+0x10>
  40154c:	4e0a      	ldr	r6, [pc, #40]	; (401578 <__libc_init_array+0x48>)
  40154e:	4d0b      	ldr	r5, [pc, #44]	; (40157c <__libc_init_array+0x4c>)
  401550:	1b76      	subs	r6, r6, r5
  401552:	f000 f8a7 	bl	4016a4 <_init>
  401556:	10b6      	asrs	r6, r6, #2
  401558:	bf18      	it	ne
  40155a:	2400      	movne	r4, #0
  40155c:	d006      	beq.n	40156c <__libc_init_array+0x3c>
  40155e:	3401      	adds	r4, #1
  401560:	f855 3b04 	ldr.w	r3, [r5], #4
  401564:	4798      	blx	r3
  401566:	42a6      	cmp	r6, r4
  401568:	d1f9      	bne.n	40155e <__libc_init_array+0x2e>
  40156a:	bd70      	pop	{r4, r5, r6, pc}
  40156c:	bd70      	pop	{r4, r5, r6, pc}
  40156e:	bf00      	nop
  401570:	004016b0 	.word	0x004016b0
  401574:	004016b0 	.word	0x004016b0
  401578:	004016b8 	.word	0x004016b8
  40157c:	004016b0 	.word	0x004016b0

00401580 <register_fini>:
  401580:	4b02      	ldr	r3, [pc, #8]	; (40158c <register_fini+0xc>)
  401582:	b113      	cbz	r3, 40158a <register_fini+0xa>
  401584:	4802      	ldr	r0, [pc, #8]	; (401590 <register_fini+0x10>)
  401586:	f000 b805 	b.w	401594 <atexit>
  40158a:	4770      	bx	lr
  40158c:	00000000 	.word	0x00000000
  401590:	004015a1 	.word	0x004015a1

00401594 <atexit>:
  401594:	2300      	movs	r3, #0
  401596:	4601      	mov	r1, r0
  401598:	461a      	mov	r2, r3
  40159a:	4618      	mov	r0, r3
  40159c:	f000 b81e 	b.w	4015dc <__register_exitproc>

004015a0 <__libc_fini_array>:
  4015a0:	b538      	push	{r3, r4, r5, lr}
  4015a2:	4c0a      	ldr	r4, [pc, #40]	; (4015cc <__libc_fini_array+0x2c>)
  4015a4:	4d0a      	ldr	r5, [pc, #40]	; (4015d0 <__libc_fini_array+0x30>)
  4015a6:	1b64      	subs	r4, r4, r5
  4015a8:	10a4      	asrs	r4, r4, #2
  4015aa:	d00a      	beq.n	4015c2 <__libc_fini_array+0x22>
  4015ac:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4015b0:	3b01      	subs	r3, #1
  4015b2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4015b6:	3c01      	subs	r4, #1
  4015b8:	f855 3904 	ldr.w	r3, [r5], #-4
  4015bc:	4798      	blx	r3
  4015be:	2c00      	cmp	r4, #0
  4015c0:	d1f9      	bne.n	4015b6 <__libc_fini_array+0x16>
  4015c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4015c6:	f000 b877 	b.w	4016b8 <_fini>
  4015ca:	bf00      	nop
  4015cc:	004016c8 	.word	0x004016c8
  4015d0:	004016c4 	.word	0x004016c4

004015d4 <__retarget_lock_acquire_recursive>:
  4015d4:	4770      	bx	lr
  4015d6:	bf00      	nop

004015d8 <__retarget_lock_release_recursive>:
  4015d8:	4770      	bx	lr
  4015da:	bf00      	nop

004015dc <__register_exitproc>:
  4015dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4015e0:	4d2c      	ldr	r5, [pc, #176]	; (401694 <__register_exitproc+0xb8>)
  4015e2:	4606      	mov	r6, r0
  4015e4:	6828      	ldr	r0, [r5, #0]
  4015e6:	4698      	mov	r8, r3
  4015e8:	460f      	mov	r7, r1
  4015ea:	4691      	mov	r9, r2
  4015ec:	f7ff fff2 	bl	4015d4 <__retarget_lock_acquire_recursive>
  4015f0:	4b29      	ldr	r3, [pc, #164]	; (401698 <__register_exitproc+0xbc>)
  4015f2:	681c      	ldr	r4, [r3, #0]
  4015f4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4015f8:	2b00      	cmp	r3, #0
  4015fa:	d03e      	beq.n	40167a <__register_exitproc+0x9e>
  4015fc:	685a      	ldr	r2, [r3, #4]
  4015fe:	2a1f      	cmp	r2, #31
  401600:	dc1c      	bgt.n	40163c <__register_exitproc+0x60>
  401602:	f102 0e01 	add.w	lr, r2, #1
  401606:	b176      	cbz	r6, 401626 <__register_exitproc+0x4a>
  401608:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40160c:	2401      	movs	r4, #1
  40160e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  401612:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  401616:	4094      	lsls	r4, r2
  401618:	4320      	orrs	r0, r4
  40161a:	2e02      	cmp	r6, #2
  40161c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  401620:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401624:	d023      	beq.n	40166e <__register_exitproc+0x92>
  401626:	3202      	adds	r2, #2
  401628:	f8c3 e004 	str.w	lr, [r3, #4]
  40162c:	6828      	ldr	r0, [r5, #0]
  40162e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  401632:	f7ff ffd1 	bl	4015d8 <__retarget_lock_release_recursive>
  401636:	2000      	movs	r0, #0
  401638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40163c:	4b17      	ldr	r3, [pc, #92]	; (40169c <__register_exitproc+0xc0>)
  40163e:	b30b      	cbz	r3, 401684 <__register_exitproc+0xa8>
  401640:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401644:	f3af 8000 	nop.w
  401648:	4603      	mov	r3, r0
  40164a:	b1d8      	cbz	r0, 401684 <__register_exitproc+0xa8>
  40164c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  401650:	6002      	str	r2, [r0, #0]
  401652:	2100      	movs	r1, #0
  401654:	6041      	str	r1, [r0, #4]
  401656:	460a      	mov	r2, r1
  401658:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40165c:	f04f 0e01 	mov.w	lr, #1
  401660:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  401664:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  401668:	2e00      	cmp	r6, #0
  40166a:	d0dc      	beq.n	401626 <__register_exitproc+0x4a>
  40166c:	e7cc      	b.n	401608 <__register_exitproc+0x2c>
  40166e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  401672:	430c      	orrs	r4, r1
  401674:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  401678:	e7d5      	b.n	401626 <__register_exitproc+0x4a>
  40167a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40167e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  401682:	e7bb      	b.n	4015fc <__register_exitproc+0x20>
  401684:	6828      	ldr	r0, [r5, #0]
  401686:	f7ff ffa7 	bl	4015d8 <__retarget_lock_release_recursive>
  40168a:	f04f 30ff 	mov.w	r0, #4294967295
  40168e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401692:	bf00      	nop
  401694:	20000440 	.word	0x20000440
  401698:	004016a0 	.word	0x004016a0
  40169c:	00000000 	.word	0x00000000

004016a0 <_global_impure_ptr>:
  4016a0:	20000018                                ... 

004016a4 <_init>:
  4016a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4016a6:	bf00      	nop
  4016a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4016aa:	bc08      	pop	{r3}
  4016ac:	469e      	mov	lr, r3
  4016ae:	4770      	bx	lr

004016b0 <__init_array_start>:
  4016b0:	00401581 	.word	0x00401581

004016b4 <__frame_dummy_init_array_entry>:
  4016b4:	004000f1                                ..@.

004016b8 <_fini>:
  4016b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4016ba:	bf00      	nop
  4016bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4016be:	bc08      	pop	{r3}
  4016c0:	469e      	mov	lr, r3
  4016c2:	4770      	bx	lr

004016c4 <__fini_array_start>:
  4016c4:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <button_status>:
2000000c:	0001 0000                                   ....

20000010 <SystemCoreClock>:
20000010:	0900 003d 0000 0000                         ..=.....

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <__atexit_recursive_mutex>:
20000440:	04e0 2000                                   ... 
